<div id="recommendations-form"{% if not readonly %} class="form-tab"{% endif %}>
{% include 'form_builder.html.twig' with { 'form': report_fields.recommendations, 'id': 'recommendations' } %}

{% if not readonly %}
    <div class="buttons">
        <div class="previous-button">
            <button type="button" onclick="showDiv('condition-form', true)">{{ 'Previous' | trans }}</button>
        </div>
        <div class="next-button">
            <button type="button" onclick="showDiv('annotate-form', true)">{{ 'Next' | trans }}</button>
        </div>
    </div>

    <script>
        {% for object_type in object_types %}
            $('input#setup_plan_{{ object_type }}_input').change(function() {
                $(this).simpleUpload('/{{ app.request.locale }}/upload', {

                    maxFileSize: 10000000, //10MB in bytes

                    start: function (file) {
                        const errorP = document.getElementById("setup_plan_{{ object_type }}_input_error");
                        errorP.innerHTML = "";
                        if(!errorP.classList.contains("hidden")) {
                            errorP.classList.add("hidden");
                        }
    //            document.getElementById('setup-plan-file-progress').innerHTML = 'Uploading...';
                    },

                    progress: function (progress) {
                        //received progress
    //            document.getElementById('setup-plan-file-progress').innerHTML = 'Uploading - ' + Math.round(progress) + '%';
                        console.log('upload progress: ' + Math.round(progress) + '%');
                    },

                    success: function (data) {
                        //upload successful
    //            document.getElementById('setup-plan-file-progress').innerHTML = '';
                        console.log('upload successful!');
                        console.log(data);

                        if(data.hasOwnProperty('error')) {
                            const errorP = document.getElementById("setup_plan_{{ object_type }}_input_error");
                            errorP.innerHTML = "Error: " + data.error;
                            errorP.classList.remove("hidden");
                        } else {
                            addSetupPlanImage('{{ object_type}}', data.image, {{ readonly }});
                        }
                    },

                    error: function (error) {
                        //upload failed
    //            document.getElementById('setup-plan-file-progress').innerHTML = '';
                        console.log('upload error: ' + error.name + ': ' + error.message);
                        const errorP = document.getElementById("setup_plan_{{ object_type }}_input_error");
                        errorP.innerHTML = "Error: " + error.message + (error.message.includes("file is too big") ? ". Max filesize is 10MB." : "");
                        errorP.classList.remove("hidden");
                    }
                });
            });
        {% endfor %}

        function confirmDeleteSetupPlan(div, input, image) {
            if(confirm('{{ 'Are you sure you want to delete this image?' | trans }}')) {
                div.parentElement.removeChild(div);
                input.value = input.value.replace(',' + image, '');
                input.value = input.value.replace(image + ',', '');
                if(input.value === '' || input.value === image) {
                    input.parentElement.removeChild(input);
                }
            }
        }
    </script>
    {% endif %}
    <script>
        function addSetupPlanImage(objectType, image, readonly) {
            if(image !== null) {
                const newDiv = document.createElement('div');
                newDiv.className = "setup-plan-image-div";
                var input = document.getElementById("setup_plan_" + objectType + "_images");
                if(!readonly) {
                    if (input == null) {
                        input = document.createElement('input');
                        input.type = "hidden";
                        input.id = "setup_plan_" + objectType + "_images";
                        input.name = "setup_plan_" + objectType + "_images";
                        input.value = image;
                        document.getElementById("setup_plan_" + objectType + "_div").appendChild(input);
                    } else {
                        input.value = input.value + "," + image;
                    }
                }

                if(image.endsWith(".pdf")) {
                    var thePdf = null;
                    var scale = 1;

                    pdfjsLib.getDocument(image).promise.then(function(pdf) {
                        thePdf = pdf;

                        if(!readonly) {
                            const deleteButton = document.createElement('div');
                            deleteButton.className = 'delete-image-button';
                            deleteButton.onclick = function () {
                                confirmDeleteSetupPlan(newDiv, input, image);
                            };
                            deleteButton.innerHTML = '<svg class="trash-right-background-image" height="33" width="33"><rect width="33" height="33" rx="4" fill="white"></rect></svg><i class="fas fa-trash-alt trash-right-icon"></i>';
                            newDiv.appendChild(deleteButton);
                        }

                        for(page = 1; page <= pdf.numPages; page++) {
                            canvas = document.createElement("canvas");
                            canvas.className = 'pdf-page-canvas';
                            newDiv.appendChild(canvas);
                            renderPage(page, canvas);
                        }
                    });

                    function renderPage(pageNumber, canvas) {
                        thePdf.getPage(pageNumber).then(function(page) {
                            viewport = page.getViewport({ scale: scale });

                            // Support HiDPI-screens.
                            var outputScale = window.devicePixelRatio || 1;

                            var context = canvas.getContext('2d');

                            canvas.width = Math.floor(viewport.width * outputScale);
                            canvas.height = Math.floor(viewport.height * outputScale);
                            canvas.style.width = Math.floor(viewport.width) + "px";
                            canvas.style.height =  Math.floor(viewport.height) + "px";

                            var transform = outputScale !== 1
                                ? [outputScale, 0, 0, outputScale, 0, 0]
                                : null;

                            var renderContext = {
                                canvasContext: context,
                                transform: transform,
                                viewport: viewport
                            };
                            page.render(renderContext);
                        });
                    }

                } else {
                    const newImg = document.createElement('img');
                    newImg.className = "setup-plan-img";
                    newImg.src = image;
                    newImg.alt = '';

                    if(!readonly) {
                        const deleteButton = document.createElement('div');
                        deleteButton.className = 'delete-image-button';
                        deleteButton.onclick = function () {
                            confirmDeleteSetupPlan(newDiv, input, image);
                        };
                        deleteButton.innerHTML = '<svg class="trash-right-background-image" height="33" width="33"><rect width="33" height="33" rx="4" fill="white"></rect></svg><i class="fas fa-trash-alt trash-right-icon"></i>';
                        newDiv.appendChild(deleteButton);
                    }
                    newDiv.appendChild(newImg);
                }
                document.getElementById("setup_plan_" + objectType + "_images_div").appendChild(newDiv);
            }
        }
    </script>
</div>

<div id="annotate-form"{% if not readonly %} class="form-tab"{% endif %}>
    {% if readonly %}
        <div class="report-header">{{ 'Annotations' | trans }}</div>
    {% endif %}
    <div id="annotation-form">
        <div id="annotation-history">
            {% set default_image = '' %}
            {% set default_image_hash = '' %}
            {% set has_history = false %}
            <div id="hidden-images">
                {% for image in images %}
                    <input type="hidden" id="hidden-image-{{ image.hash }}" name="images[]" value="{{ image | json_encode | replace({'"': '\\"'}) }}">
                    {% if annotation_history[image.hash] is defined %}
                        {% for id, timestamp in annotation_history[image.hash] %}
                            {% set has_history = true %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
            </div>
            {% if has_history or not readonly %}
                {% for image in images %}
                    {% if loop.first %}
                        {% set default_image = image.image %}
                        {% set default_image_hash = image.hash %}
                        <div id="history">
                            <div class="flex">
                                <button type="button" onclick="resetAnnotations()" class="show-all" id="show-hide-all-annos"><i class="far fa-eye"></i><span>{{ 'Hide all' | trans }}</span></button>
                                <button type="button" onclick="toggleNumberOverlays(window.osd_anno)" id="show-hide-numbers"><i class="far fa-eye"></i><span>{{ '1' | trans }}</span></button>
                            </div>
                            <div id="annotation-history-timestamps">
                                {% if not readonly %}
                                    <div id="annos-{{ image.hash }}-999999999" class="show-hide-current-annos">
                                        <button type="button" onclick="toggleAnnotations('999999999')" id="show-hide-annos-{{ image.hash }}-999999999" class="hide">
                                            <i class="far fa-eye"></i>
                                            <span>{{ 'Current annotations' | trans }}</span>
                                        </button>
                                        <div class="annotations-list"></div>
                                    </div>
                                {% endif %}
                                {% if annotation_history[image.hash] is defined %}
                                    {% for id, timestamp in annotation_history[image.hash] %}
                                        <div id="annos-{{ image.hash }}-{{ id }}">
                                            <button type="button" onclick="toggleAnnotations('{{ id }}')" id="show-hide-annos-{{ image.hash }}-{{ id }}" class="hide">
                                                <i class="far fa-eye"></i>
                                                <span class="text-align-left">{{ timestamp.editor }}<br/><i>{{ timestamp.timestamp }}</i></span>
                                            </button>
                                            <div class="annotations-list"></div>
                                        </div>
                                    {% endfor %}
                                {% endif %}
                            </div>
                        </div>
                    {% endif %}
                {% endfor %}
            {% endif %}
        </div>
        <div id="annotation-tools">
            {% set damage_types = [] %}
            {% for key, damage_type in report_fields.damage_types %}
                {% set damage_type_translated = key | trans %}
                {% set damage_note = '' %}
                {% if damage_type.note is iterable %}
                    {% for note in damage_type.note %}
                        {% set damage_note_translated = note | trans %}
                        {% set damage_note = damage_note ~ (loop.first ? '' : '&#10;&#10;') ~ damage_note_translated %}
                    {% endfor %}
                {% else %}
                    {% set damage_note_translated = damage_type.note | trans %}
                    {% set damage_note = damage_note_translated %}
                {% endif %}
                {% set damage_types = damage_types | merge({ (damage_type_translated): { 'name': damage_type_translated, 'applies_to': damage_type.applies_to, 'note': damage_note, 'aat': damage_type.aat is defined ? damage_type.aat : '' }}) %}
            {% endfor %}
            {% set damage_types = damage_types | sort %}
            {% if not readonly %}
                <div>
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('rect');" value="rect">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30 30" style="enable-background:new 0 0 30 30;" xml:space="preserve">
                            <path d="M25.8,4.2v21.6H4.2V4.2H25.8 M30,0H0v30h30V0L30,0z"/>
                        </svg>
                    </button>
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('polygon');" value="polygon">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 34.6 30" style="enable-background:new 0 0 34.6 30;" xml:space="preserve">
                            <path d="M23.6,4.2L29.8,15l-6.2,10.8H11.1L4.8,15l6.2-10.8H23.6 M26,0H8.7L0,15l8.7,15H26l8.7-15L26,0L26,0z"/>
                        </svg>
                    </button>
                    <!--<button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('circle');" value="recirclect">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30 30" style="enable-background:new 0 0 30 30;" xml:space="preserve">
                            <path d="M15,4.2C21,4.2,25.8,9,25.8,15S21,25.8,15,25.8S4.2,21,4.2,15S9,4.2,15,4.2 M15,0C6.7,0,0,6.7,0,15s6.7,15,15,15
                                s15-6.7,15-15S23.3,0,15,0L15,0z"/>
                        </svg>
                    </button>-->
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('ellipse');" value="ellipse">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30 30" style="enable-background:new 0 0 30 30;" xml:space="preserve">
                            <path d="M15,4.2C21,4.2,25.8,9,25.8,15S21,25.8,15,25.8S4.2,21,4.2,15S9,4.2,15,4.2 M15,0C6.7,0,0,6.7,0,15s6.7,15,15,15
                                s15-6.7,15-15S23.3,0,15,0L15,0z"/>
                        </svg>
                    </button>
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('freehand');" value="freehand">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30.3 30" style="enable-background:new 0 0 30.3 30;" xml:space="preserve">
                            <path d="M2.9,6.5c1.2-1.2,2.3-2.3,2.9-2c0.8,0.3,0,1.7-0.5,2.5c-0.4,0.7-4.8,6.5-4.8,10.5c0,2.1,0.8,3.9,2.2,5
                                c1.3,0.9,2.9,1.2,4.4,0.8c1.8-0.5,3.3-2.3,5.1-4.6c2-2.5,4.7-5.7,6.8-5.7c2.7,0,2.8,1.7,2.9,3c-6.3,1.1-9,6.1-9,9
                                c0,2.8,2.4,5.2,5.4,5.2c2.7,0,7.2-2.2,7.8-10.2h4.1v-4.2h-4.1c-0.3-2.8-1.8-7-6.7-7c-3.8,0-7,3.2-8.2,4.7c-1,1.2-3.4,4.1-3.8,4.5
                                c-0.4,0.5-1.1,1.4-1.9,1.4c-0.8,0-1.2-1.4-0.6-3.2c0.6-1.8,2.3-4.8,3.1-5.9c1.3-1.9,2.2-3.2,2.2-5.5C10.2,1.2,7.5,0,6,0
                                C3.8,0,1.9,1.7,1.5,2.1C0.9,2.7,0.4,3.2,0,3.6L2.9,6.5z M18.4,25.9c-0.5,0-1.2-0.4-1.2-1.2c0-1,1.2-3.7,4.8-4.6
                                C21.5,24.6,19.6,25.9,18.4,25.9z"/>
                        </svg>
                    </button>
                </div>
                <div id="select-layer-div">
                    <div class="layer-multiselect">
                        <div class="layer-select-box" onclick="showLayerCheckboxes()">
                            <select>
                                <option>{{ 'Select layer' | trans }}</option>
                            </select>
                            <div class="layer-over-select" id="layer-over-select"></div>
                        </div>
                        <div id="layer-checkboxes">
                            <div class="layer-checkbox-div"><input type="checkbox" id="layer-support" onchange="checkLayerCheckbox(this)" autocomplete="off"/><label for="layer-support">{{ 'Support' | trans }}</label></div>
                            <div class="layer-checkbox-div"><input type="checkbox" id="layer-supporting-medium" onchange="checkLayerCheckbox(this)" autocomplete="off"/><label for="layer-supporting-medium">{{ 'Supporting medium' | trans }}</label></div>
                            <div class="layer-checkbox-div"><input type="checkbox" id="layer-paint-layer" onchange="checkLayerCheckbox(this)" autocomplete="off"/><label for="layer-paint-layer">{{ 'Paint layer' | trans }}</label></div>
                            <div class="layer-checkbox-div"><input type="checkbox" id="layer-finishing-layer" onchange="checkLayerCheckbox(this)" autocomplete="off"/><label for="layer-finishing-layer">{{ 'Varnish/Protection layer' | trans }}</label></div>
                            <div class="layer-checkbox-div"><input type="checkbox" id="layer-frame" onchange="checkLayerCheckbox(this)" autocomplete="off"/><label for="layer-frame">{{ 'Frame' | trans }}</label></div>
                        </div>
                    </div>
                </div>
                <div id="select-damage-type-div">
                {% for object_type in object_types %}
                    <div id="annotation-select-{{ object_type }}"{% if this_object_type != object_type %} class="hidden"{% endif %}>
                        <select class="annotation-select" onchange="selectedDamageType(this)" autocomplete="off">
                            <option value="" selected disabled hidden>{{ 'Select damage type' | trans }}</option>
                            {% for key, damage_type in damage_types %}
                                {% if object_type == 'default' or object_type in damage_type.applies_to %}
                                    <option value="{{ damage_type.name }}">{{ damage_type.name }}</option>
                                {% endif %}
                            {% endfor %}
                            <option value="">{{ 'Other ...' | trans }}</option>
                        </select>
                    </div>
                {% endfor %}
                </div>
                <input type='hidden' value='false' name='group_same_damages'>
            {% endif %}
            <div class="form-checkbox" id="same-damages-checkbox{% if readonly %}-readonly{% endif %}">{% include 'checkbox.html.twig' with { 'name': 'group_same_damages', 'label': 'Group same damages' | trans, 'onclick': 'groupUngroupSameDamages(this.checked);', 'checked': prefilled_data.group_same_damages is not defined, 'disabled': false } %}</div>
            {% if readonly and prefilled_data.manifest is defined %}
                <a id="iiif-manifest-url" href="{{ prefilled_data.manifest }}">IIIF Manifest</a>
            {% endif %}
        </div>

        <div id="annotation-viewer">
            <div id="overlays"></div>
            <div id="openseadragon-annotorious"></div>
            {% if readonly %}
                {% for image in images %}
                    <div class="no-print-break">
                        <div id="openseadragon-annotorious-print-{{ image.hash }}" class="openseadragon-annotorious-print"></div>
                    </div>
                    <div class="no-print-break">
                        {% if annotation_history[image.hash] is defined %}
                            <div id="annotation-history-print">
                                {% for id, timestamp in annotation_history[image.hash] %}
                                    <div id="annos-print-{{ image.hash }}-{{ id }}">{{ timestamp }}</div>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                {% endfor %}
            {% endif %}
        </div>

        {% if images | length > 1 or not readonly %}
            <div id="annotation-images">
                {% if not readonly %}
                    <!-- TODO fix this, if you change object category from sculpture (in an already made report) to anything else, this will not work -->
                    <div id="add-images">
                        <select id="add-image-select" onchange="selectedImageToAdd(this)" autocomplete="off">
                            <option value="" selected disabled hidden>{{ 'Add image' | trans }}</option>
                            {% if this_object_type != 'sculpture' %}
                                <optgroup label="{{ 'Simplified image of a frame' | trans }}">
                                    {% for key, option in annotation_schema_images %}
                                        {% if key ends with 'front' %}
                                            <option value="{{ key }}" id="{{ key }}">{{ option.name | trans }}</option>
                                        {% endif %}
                                    {% endfor %}
                                </optgroup>
                                <optgroup label="{{ 'Simplified image of a backside' | trans }}">
                                    {% for key, option in annotation_schema_images %}
                                        {% if key ends with 'back' %}
                                            <option value="{{ key }}" id="{{ key }}">{{ option.name | trans }}</option>
                                        {% endif %}
                                    {% endfor %}
                                </optgroup>
                            {% endif %}
                            <optgroup label="{{ 'Other image' | trans }}">
                                <option value="camera">{{ 'Image through camera' | trans }} (max 10MB)</option>
                                <option value="device">{{ 'Image on device' | trans }} (max 10MB)</option>
                                <option value="url">{{ 'Image through URL' | trans }} (max 10MB)</option>
                                <option value="iiif">{{ 'IIIF image through URL' | trans }}</option>
                            </optgroup>
                        </select>
                        <div id="add-image-div">
                            <input type="file" id="annotate-camera" name="annotate-file" accept="image/*" capture="environment" style="display: none">
                            <input type="file" id="annotate-file" name="annotate-file" accept="image/*" style="display: none">
                            <input type="text" id="add-image-url" placeholder="{{ 'Fill in image URL ...' | trans }}">
                            <button type="button" id="add-image-url-button" onclick="triggerImageAdd()">{{ 'Load' | trans }}</button>
                        </div>
                    </div>
                    <input type="hidden" id="annotation_data" name="annotation_data">
                {% endif %}
                <div id="thumbnails">
                    {% for image in images %}
                        <div class="thumbnail-image" id="thumbnail-image-{{ image.hash }}">
                            <img src="{{ image.thumbnail }}" alt="" onclick="clickedThumbnail('{{ image.hash }}', '{{ image.image}}')">
                            {% if not readonly %}
                                <div class="delete-image-button" onclick="confirmDeleteImage('{{ image.hash }}')">
                                    <svg class="trash-background-image" height="33" width="33">
                                        <rect width="33" height="33" rx="4" fill="white"></rect>
                                    </svg>
                                    <i class="fas fa-trash-alt trash-icon"></i>
                                </div>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% endif %}
    </div>

    <!--<button type="button" id="print-button" onclick="if(window.isPrinting) return; window.isPrinting = true; window.osd.viewport.goHome(true); setTimeout(function(){ window.isPrinting = false; window.print(); }, 100);">Printen</button>-->

    {% if not readonly %}
        <div class="buttons">
            <div class="previous-button">
                <button type="button" onclick="showDiv('recommendations-form', true)">{{ 'Previous' | trans }}</button>
            </div>
            <!--<div class="send-button">
                <input type="submit" value="Rapport verzenden">
            </div>-->
        </div>
    {% endif %}
</div>

<script>

{% if not readonly %}

$('input#annotate-file').change(function() {

    $(this).simpleUpload('/{{ app.request.locale }}/upload', {
        maxFileSize: 10000000, //10MB in bytes

        start: function(file) {
            document.getElementById('add-image-select').selectedIndex = 0;
            document.getElementById('annotate-file').value = '';
//            document.getElementById('annotate-file-progress').innerHTML = 'Uploading...';
        },

        progress: function(progress){
            //received progress
//            document.getElementById('annotate-file-progress').innerHTML = Math.round(progress) + '%';
            console.log('upload progress: ' + Math.round(progress) + '%');
        },

        success: function(data){
            //upload successful
//            document.getElementById('annotate-file-progress').innerHTML = '';
            console.log('upload successful!');
            console.log(data);

            addImage(data);
        },

        error: function(error){
            //upload failed
            console.log(error);
//            document.getElementById('annotate-file-progress').innerHTML = '';
            console.log('upload error: ' + error.name + ': ' + error.message);
            window.alert("Error: " + error.message);
        }
    });
});

$('input#annotate-camera').change(function() {

    $(this).simpleUpload('/{{ app.request.locale }}/upload', {
        maxFileSize: 10000000, //10MB in bytes

        start: function(file) {
            document.getElementById('add-image-select').selectedIndex = 0;
            document.getElementById('annotate-camera').value = '';
//            document.getElementById('annotate-camera-progress').innerHTML = 'Uploading...';
        },

        progress: function(progress){
            //received progress
//            document.getElementById('annotate-camera-progress').innerHTML = Math.round(progress) + '%';
            console.log('upload progress: ' + Math.round(progress) + '%');
        },

        success: function(data){
            //upload successful
//            document.getElementById('annotate-camera-progress').innerHTML = '';
            console.log('upload successful!');
            console.log(data);

            addImage(data);
        },

        error: function(error){
            //upload failed
            console.log(error);
//            document.getElementById('annotate-camera-progress').innerHTML = '';
            console.log('upload error: ' + error.name + ': ' + error.message);
            window.alert("Error: " + error.message);
        }
    });
});

{% endif %}

window.osd_anno = OpenSeadragon({
    id: 'openseadragon-annotorious',
    tileSources: [
        {% for image in images %}
            {% if loop.first %}
                {% if image.image ends with '/info.json' %}
                    '{{ image.image }}'
                {% else %}
                    {
                        'type': 'image',
                        'url': '{{ image.image }}'
                    }
                {% endif %}
            {% endif %}
        {% endfor %}
    ]
});

window.damageTypes = {{ damage_types | json_encode | raw }};

window.annoConf = {
    locale: 'auto',
    styleColor: 'red',
    styleFill: '',
    styleClass: 'condition-red',
    damageType: ''
    {% if readonly %}
        , readOnly: true
    {% else %}
        , userId: '{{ email }}'
        , userName: '{{ full_name }}'
    {% endif %}
};
window.overlays = [];

window.anno = OpenSeadragon.Annotorious(window.osd_anno, window.annoConf);

window.osd_anno.addHandler('open', function(event) {
    addNumberOverlays(window.osd_anno, window.currentImageHash, 'viewer', true);
});

window.anno.on('mouseEnterAnnotation', function(annotation, ele) {
    if(annotation != null) {
        var spans = document.getElementsByClassName('anno-hist-' + annotation.id);
        if(spans !== null) {
            for(var i = 0; i < spans.length; i++) {
                spans[i].classList.add('anno-hist-hover');
            }
        }
        var number = window.annoIds.hasOwnProperty(annotation.id) ? (window.groupSameDamages ? window.annoIds[annotation.id].groupedNumber : window.annoIds[annotation.id].ungroupedNumber) : null;
        if(number !== null) {
            const eles = document.getElementsByClassName('annotation-number-' + number);
            if (eles != null) {
                for(var i = 0; i < eles.length; i++) {
                    eles[i].classList.add('highlighted-number');
                }
            }
        }
    }
});

window.anno.on('selectAnnotation', function(annotation, ele) {
    if(annotation != null) {
        var spans = document.getElementsByClassName('anno-hist-' + annotation.id);
        if(spans !== null) {
            for(var i = 0; i < spans.length; i++) {
                spans[i].classList.add('anno-hist-hover');
            }
        }
        var number = window.annoIds.hasOwnProperty(annotation.id) ? (window.groupSameDamages ? window.annoIds[annotation.id].groupedNumber : window.annoIds[annotation.id].ungroupedNumber) : null;
        if(number !== null) {
            const eles = document.getElementsByClassName('annotation-number-' + number);
            if (eles != null) {
                for(var i = 0; i < eles.length; i++) {
                    eles[i].classList.add('highlighted-number');
                }
            }
        }
        if(annotation.hasOwnProperty('body')) {
            {% if not readonly %}
                var toDelete = document.querySelectorAll("div.r6o-editable-text");
                for(var i = 0; i < toDelete.length; i++) {
                    toDelete[i].parentElement.removeChild(toDelete[i]);
                }
                var comments = document.querySelectorAll("textarea.r6o-editable-text:not(.r6o-nodrag)");
                if(comments.length === annotation.body.length) {
                    for(var i = 0; i < annotation.body.length; i++) {
                        if(annotation.body[i].hasOwnProperty('value') && window.damageTypes.hasOwnProperty(annotation.body[i].value)) {
                            const newDiv = document.createElement('div');
                            newDiv.className = 'r6o-editable-text';
                            if(window.damageTypes[annotation.body[i].value].aat !== '') {
                                newDiv.innerHTML = '<div class="annotation-span-div"><a class="aat-link" href="' + window.damageTypes[annotation.body[i].value].aat + '" title="' + window.damageTypes[annotation.body[i].value].note + '" target="_blank">' + comments[i].value + "</a></div>";
                            } else {
                                newDiv.innerHTML = '<div class="annotation-span-div"><span title="' + window.damageTypes[annotation.body[i].value].note + '">' + comments[i].value + "</span></div>";
                            }
                            const comment = comments[i];
                            const parentElement = comments[i].parentElement;
                            comments[i].classList.add("hidden");
                            if(parentElement.childNodes.length === 0) {
                                parentElement.appendChild(newDiv);
                            } else {
                               parentElement.insertBefore(newDiv, parentElement.firstChild);
                            }
                            new MutationObserver((mutationList, obser) => {
                                if(newDiv.parentElement === null) {
                                    obser.disconnect();
                                } else {
                                    for (const mutation of mutationList) {
                                        if (mutation.type === "attributes" && mutation.attributeName === "disabled") {
                                            comment.classList.remove("hidden");
                                            newDiv.parentElement.removeChild(newDiv);
                                            obser.disconnect();
                                        }
                                    }
                                }
                            }).observe(comment, { 'attributes': true });
                        }
                    }
                }
            {% else %}
                var toDelete = document.querySelectorAll("div.custom-r6o-comment");
                for(var i = 0; i < toDelete.length; i++) {
                    toDelete[i].parentElement.removeChild(toDelete[i]);
                }
                var comments = document.querySelectorAll(".r6o-readonly-comment");
                if(comments.length === annotation.body.length) {
                    for(var i = 0; i < annotation.body.length; i++) {
                        if(annotation.body[i].hasOwnProperty('value') && window.damageTypes.hasOwnProperty(annotation.body[i].value)) {
                            const newDiv = document.createElement('div');
                            newDiv.className = "custom-r6o-comment";
                            if(window.damageTypes[annotation.body[i].value].aat !== '') {
                                newDiv.innerHTML = '<a class="aat-link" href="' + window.damageTypes[annotation.body[i].value].aat + '" title="' + window.damageTypes[annotation.body[i].value].note + '" target="_blank">' + comments[i].innerHTML + "</a>";
                            } else {
                                newDiv.innerHTML = '<span title="' + window.damageTypes[annotation.body[i].value].note + '">' + comments[i].innerHTML + "</span>";
                            }
                            const parentElement = comments[i].parentElement;
                            comments[i].classList.add("hidden");
                            if(parentElement.childNodes.length === 0) {
                                parentElement.appendChild(newDiv);
                            } else {
                                parentElement.insertBefore(newDiv, parentElement.firstChild);
                            }
                        }
                    }
                }
            {% endif %}
        }
    }
});

window.anno.on('mouseLeaveAnnotation', function(annotation, ele) {
    if(annotation != null) {
        var spans = document.getElementsByClassName('anno-hist-' + annotation.id);
        if(spans !== null) {
            for(var i = 0; i < spans.length; i++) {
                spans[i].classList.remove('anno-hist-hover');
            }
        }
        var number = window.annoIds.hasOwnProperty(annotation.id) ? (window.groupSameDamages ? window.annoIds[annotation.id].groupedNumber : window.annoIds[annotation.id].ungroupedNumber) : null;
        if(number !== null) {
            const eles = document.getElementsByClassName('annotation-number-' + number);
            if (eles != null) {
                for(var i = 0; i < eles.length; i++) {
                    eles[i].classList.remove('highlighted-number');
                }
            }
        }
    }
});

window.anno.on('cancelSelected', function(annotation, ele) {
    if(annotation != null) {
        var spans = document.getElementsByClassName('anno-hist-' + annotation.id);
        if(spans !== null) {
            for(var i = 0; i < spans.length; i++) {
                spans[i].classList.remove('anno-hist-hover');
            }
        }
        var number = window.annoIds.hasOwnProperty(annotation.id) ? (window.groupSameDamages ? window.annoIds[annotation.id].groupedNumber : window.annoIds[annotation.id].ungroupedNumber) : null;
        if(number !== null) {
            const eles = document.getElementsByClassName('annotation-number-' + number);
            if (eles != null) {
                for(var i = 0; i < eles.length; i++) {
                    eles[i].classList.remove('highlighted-number');
                }
            }
        }
    }
});

window.anno.on('updateAnnotation', function(annotation, ele) {
    if(annotation != null && window.currentImageHash in window.addedAnnotations) {

        //Update the list of added annotations
        var annotationReportId = null;
        for(reportId in window.addedAnnotations[window.currentImageHash]) {
            for (const [annoId, anno] of Object.entries(window.addedAnnotations[window.currentImageHash][reportId])) {
                if(annoId === annotation.id) {
                    annotationReportId = reportId;
                    break;
                }
            }
        }
        if(annotationReportId !== null) {
            window.addedAnnotations[window.currentImageHash][annotationReportId][annotation.id] = annotation;
        } else {
            annotationReportId = '999999999';
        }

        //No longer highlight the annotation we just updated
        var number = window.annoIds.hasOwnProperty(annotation.id) ? (window.groupSameDamages ? window.annoIds[annotation.id].groupedNumber : window.annoIds[annotation.id].ungroupedNumber) : null;
        if(number !== null) {
            const eles = document.getElementsByClassName('annotation-number-' + number);
            if (eles != null) {
                for(var i = 0; i < eles.length; i++) {
                    eles[i].classList.remove('highlighted-number');
                }
            }
        }

        //Update the text in the sidebar
        if(annotation.hasOwnProperty('body')) {
            if(window.annoIds.hasOwnProperty(annotation.id)) {
                var text = '';
                for(var i = 0; i < annotation.body.length; i++) {
                    if(annotation.body[i].hasOwnProperty('value') && annotation.body[i].value != null) {
                        text += (text !== '' ? '<br/>' : '') + annotation.body[i].value;
                    }
                }
                window.annoIds[annotation.id].text = text;

                const groupedNumber = window.annoIds[annotation.id].groupedNumber;
                var ungroup = false;
                for (const [annoId, anno] of Object.entries(window.annoIds)) {
                    if (annoId !== annotation.id && anno.reportId === annotationReportId && anno.groupedNumber === groupedNumber) {
                        if (anno.text !== text) {
                            ungroup = true;
                            break;
                        }
                    }
                }
                if(ungroup) {
                    var encounteredSelf = false;
                    var encounteredOther = false;
                    for (const [annoId, anno] of Object.entries(window.annoIds)) {
                        if(annoId === annotation.id) {
                            if(encounteredOther && !encounteredSelf) {
                                window.annoIds[annoId].groupedNumber = window.annoIds[annoId].groupedNumber + 1;
                            }
                            encounteredSelf = true;
                        } else if(anno.groupedNumber >= groupedNumber) {
                            if(encounteredSelf && !encounteredOther) {
                                window.annoIds[annoId].groupedNumber = window.annoIds[annoId].groupedNumber + 1;
                            }
                            encounteredOther = true;
                        }
                    }
                }
            }

            clickedThumbnail(window.currentImageHash, window.currentImage);

/*            //TODO split into its own annotation group if the text is no longer the same
            var spans = document.getElementsByClassName('anno-hist-' + annotation.id);
            if (spans !== null) {
                var deleted = isAnnotationDeleted(annotation.id, window.currentImageHash);
                for (var i = 0; i < spans.length; i++) {
                    spans[i].innerHTML = getHistorySpanText(annotation.body, number, deleted);
                }
            }*/
        }
    }
});

window.anno.on('createAnnotation', function(annotation, ele) {
    if(annotation != null) {
        var styleClass = null;
        if (annotation.hasOwnProperty('target') && annotation.target.hasOwnProperty('styleClass')) {
            styleClass = annotation.target.styleClass;
        }
        if(!window.annoIds.hasOwnProperty(annotation.id)) {
            var damageAlreadyExists = false;
            var text = '';
            if(annotation.hasOwnProperty('body')) {
                for(var i = 0; i < annotation.body.length; i++) {
                    if(annotation.body[i].hasOwnProperty('value') && annotation.body[i].value != null) {
                        text += (text !== '' ? '<br/>' : '') + annotation.body[i].value;
                    }
                }
            }
            var groupedNumber = 1;
            for(const [annoId, anno] of Object.entries(window.annoIds)) {
                if(anno.reportId === '999999999' && anno.text === text && anno.layers === styleClass) {
                    groupedNumber = anno.groupedNumber;
                    damageAlreadyExists = true;
                    const spans = document.getElementsByClassName('anno-hist-' + annoId);
                    if(spans !== null) {
                        for(var i = 0; i < spans.length; i++) {
                            spans[i].classList.add('anno-hist-' + annotation.id);
                        }
                    }
                    break;
                }
            }
            var ungroupedNumber = groupedNumber;
            var highestGroupedNumber = groupedNumber;
            for(const [annoId, anno] of Object.entries(window.annoIds)) {
                if (anno.ungroupedNumber >= ungroupedNumber) {
                    ungroupedNumber = anno.ungroupedNumber + 1;
                }
                if (anno.groupedNumber >= highestGroupedNumber) {
                    highestGroupedNumber = anno.groupedNumber + 1;
                }
            }
            if(!damageAlreadyExists) {
                groupedNumber = highestGroupedNumber;
            }
            window.annoIds[annotation.id] = {
                'reportId': '999999999',
                'groupedNumber': groupedNumber,
                'ungroupedNumber': ungroupedNumber,
                'text': text,
                'layers': styleClass
            };
            window.addedAnnotations[window.currentImageHash]['999999999'][annotation.id] = annotation;
            if(!window.groupSameDamages || !damageAlreadyExists) {
                var buttons = document.getElementsByClassName('show-hide-current-annos');
                for (var i = 0; i < buttons.length; i++) {
                    buttons[i].style = 'display: block';
                    var div = buttons[i].querySelector('div');
                    if (div != null) {
                        if (annotation.hasOwnProperty('body')) {
                            addAnnoHistSpan(div, null, annotation.id, annotation.body, styleClass, true);
                        }
                    }
                }
            }
            addNumberOverlays(window.osd_anno, window.currentImageHash, 'viewer', true);
        }
    }
});

window.anno.on('deleteAnnotation', function(annotation, ele) {
    if(annotation != null) {
        var buttons = document.getElementsByClassName('anno-hist-' + annotation.id);
        if(buttons != null) {
            for(var i = buttons.length - 1; i >= 0; i--) {
                buttons[i].classList.remove('anno-hist-hover');
                var parentGroup = buttons[i].parentElement;
                var parentParentDiv = parentGroup.parentElement;
                var topDiv = parentParentDiv.parentElement;
                if(topDiv.className === 'show-hide-current-annos') {
                    parentGroup.removeChild(buttons[i]);
                    if(parentGroup.querySelectorAll('div').length === 0) {
                        parentParentDiv.removeChild(parentGroup);
                    }
                    if(parentParentDiv.childElementCount === 0) {
                        topDiv.style = 'display: none';
                    }
                    if(window.currentImageHash in window.addedAnnotations) {
                        for(id in window.addedAnnotations[window.currentImageHash]) {
                            for (const [annoId, anno] of Object.entries(window.addedAnnotations[window.currentImageHash][id])) {
                                if(annoId === annotation.id) {
                                    delete window.addedAnnotations[window.currentImageHash][id][annoId];
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    var alreadyIn = false;
                    if(window.currentImageHash in window.deletedAnnotations) {
                        for(id in window.deletedAnnotations[window.currentImageHash]) {
                            if (window.deletedAnnotations[window.currentImageHash][id].includes(annotation.id)) {
                                alreadyIn = true;
                                break;
                            }
                        }
                    }
                    if(!alreadyIn) {
                        if(window.annoIds.hasOwnProperty(annotation.id)) {
                            var highestGroupedNumber = 1;
                            for(const [annoId, anno] of Object.entries(window.annoIds)) {
                                if (anno.groupedNumber >= highestGroupedNumber) {
                                    highestGroupedNumber = anno.groupedNumber + 1;
                                }
                            }
                            window.annoIds[annotation.id].groupedNumber = highestGroupedNumber;
                        }
                        window.deletedAnnotations[window.currentImageHash]['999999999'].push(annotation.id);
                        clickedThumbnail(window.currentImageHash, window.currentImage);
/*                        var buttons1 = document.getElementsByClassName('show-hide-current-annos');
                        for(var j = 0; j < buttons1.length; j++) {
                            buttons1[j].style = 'display: block';
                            var div = buttons1[j].querySelector('div');
                            if(div != null) {
                                addAnnoHistSpan(div, null, annotation.id, null, null, false);
                            }
                        }*/
                    }
                }
            }
        }
    }
    addNumberOverlays(window.osd_anno, window.currentImageHash, 'viewer', true);
});

Annotorious.SelectorPack(window.anno, {});

{% if readonly %}
    {% for image in images %}
        window.osdPrint{{ image.hash }} = OpenSeadragon({
            id: 'openseadragon-annotorious-print-{{ image.hash }}',
            tileSources: [
                {% if image.image ends with '/info.json' %}
                '{{ image.image }}'
                {% else %}
                {
                    'type': 'image',
                    'url': '{{ image.image }}'
                }
                {% endif %}
            ]
        });
        window.osdPrint{{ image.hash }}.addHandler('open', function(event) {
            addNumberOverlays(window.osdPrint{{ image.hash }}, '{{ image.hash }}', 'print', false);
        });
        window.annoPrint{{ image.hash }} = OpenSeadragon.Annotorious(window.osdPrint{{ image.hash }}, {});
    {% endfor %}
{% else %}
    window.anno.setAuthInfo({
        id: '{{ email }}',
        displayName: '{{ full_name }}'
    });
{% endif %}

window.onload = function() {

    {% for object_type in object_types %}
        {% if prefilled_data['recommendations_' ~ object_type ~ '_presentation_guidelines_radio'] is defined
            and prefilled_data['recommendations_' ~ object_type ~ '_presentation_guidelines_radio'] == 'present' %}
            {% if not readonly %}
                document.getElementById("setup_plan_{{ object_type }}_div").classList.remove("hidden");
            {% endif %}
            {% if prefilled_data['setup_plan_' ~ object_type ~ '_images'] is defined %}
                {% for image in prefilled_data['setup_plan_' ~ object_type ~ '_images']|split(',') %}
                    addUploadedImage('{{ object_type }}', '{{ image }}', {{ readonly | json_encode }}, 'setup_plan', 'setup-plan-image-div');
                {% endfor %}
            {% endif %}
        {% endif %}
        {% if prefilled_data['recommendation_image_' ~ object_type ~ '_images'] is defined %}
            {% for image in prefilled_data['recommendation_image_' ~ object_type ~ '_images']|split(',') %}
                addUploadedImage('{{ object_type }}', '{{ image }}', {{ readonly | json_encode }}, 'recommendation_image', 'recommendation-image-div');
            {% endfor %}
        {% endif %}
    {% endfor %}


    refreshAnnotations(window.anno, window.osd_anno, window.currentImageHash, 'viewer', true);

    {% if not readonly %}
        document.forms[0].addEventListener('submit', function() {
            document.body.onbeforeunload = '';
            var annotations = {};
            for(var i = 0; i < window.images.length; i++) {
                var hash = window.images[i].hash;
                annotations[hash] = {};
                for (const id in window.annotationHistory[hash]) {
                    if (id in window.deletedAnnotations[hash]) {
                        for (const delId of window.deletedAnnotations[hash][id]) {
                            delete annotations[hash][delId];
                        }
                    }
                    if (id in window.addedAnnotations[hash]) {
                        for (const [annoId, anno] of Object.entries(window.addedAnnotations[hash][id])) {
                            annotations[hash][annoId] = anno;
                        }
                    }
                }
            }
            document.getElementById('annotation_data').value = JSON.stringify(annotations);
        });
        var objectTypePopupSelect = document.getElementById('object-type-popup-select');
        if (objectTypePopupSelect != null) {
            objectTypePopupSelect.selectedIndex = 0;
        }
        {% if prefilled_data.object_type is defined %}
            var objectTypeSelect = document.getElementById('object-type-select');
            if (objectTypeSelect != null) {
                {% for object_type in object_types %}
                    {% if this_object_type == object_type %}
                        objectTypeSelect.selectedIndex = {{ loop.index }};
                    {% endif %}
                {% endfor %}
            }
        {% else %}
            var objectTypeSelect = document.getElementById('object-type-select');
            if (objectTypeSelect != null) {
                objectTypeSelect.selectedIndex = 0;
            }
        {% endif %}
        var addImageSelect = document.getElementById('add-image-select');
        if (addImageSelect != null) {
            addImageSelect.selectedIndex = 0;
        }
        var reasonDropdown = document.getElementById('reason-dropdown');
        if(reasonDropdown != null) {
            {% if prefilled_data.reason_custom is not defined %}
                reasonDropdown.selectedIndex = 0;
            {% endif %}
        }
    {% else %}
        var cur = window.currentImageHash;
        {% for image in images %}
            window.currentImageHash = '{{ image.hash }}';
            refreshAnnotations(window.annoPrint{{ image.hash }}, window.osdPrint{{ image.hash }}, '{{ image.hash }}', 'print', false);
        {% endfor %}
        window.currentImageHash = cur;

        var headers = document.getElementsByClassName('report-header');

        for (var i = 0; i < headers.length; i++) {
            var nextSibling = headers[i].nextElementSibling;

            if (typeof nextSibling !== 'undefined' && nextSibling.className === 'form-group') {
                var groupDiv = document.createElement('div');

                groupDiv.className = 'nobreak';

                headers[i].parentElement.insertBefore(groupDiv, headers[i]);

                groupDiv.appendChild(headers[i]);
                groupDiv.appendChild(nextSibling);
            }
        }

        window.printCheckboxes = {};
        var printSelection = document.getElementById("print-selection");
        var forms = {
            "{{ 'Report reason' | trans }}": "reason-form",
            "{{ 'Object identification' | trans }}": "basic-info-form",
            "{{ 'Involved actors' | trans }}": "actors-form",
            "{{ 'Physical characteristics' | trans }}": "material-form",
            "{{ 'Condition and conservation' | trans }}": "condition-form",
            "{{ 'Recommendations' | trans }}": "recommendations-form",
            "{{ 'Annotations' | trans }}": "annotate-form",
            "{{ 'Signatures' | trans }}": "signatures-form"
        };
        for (const [name, formId] of Object.entries(forms)) {
            var form = document.getElementById(formId);
            if(form !== null) {
                var a = 0;
                var b = 0;
                addPrintCheckbox(formId, 0, 0, "main", form, name, "");
                printSelection.appendChild(window.printCheckboxes[formId].div);

                var reportFormDivs = form.getElementsByClassName("form-group");
                if (reportFormDivs !== null) {
                    for (var d = 0; d < reportFormDivs.length; d++) {
                        const childDiv = reportFormDivs[d];
                        if(isHiddenForm(childDiv)) {
                            continue;
                        }
                        var prevSibling = childDiv.previousElementSibling;
                        if (prevSibling !== null && prevSibling.className === "report-header") {
                            b = 0;
                            a++;
                            addPrintCheckbox(formId, a, 0, "sub", childDiv.parentElement, prevSibling.innerHTML, "print-selection-indent");
                        }
                        var header = childDiv.getElementsByClassName("report-header-2");
                        if (header !== null && header.length > 0) {
                            b++;
                            addPrintCheckbox(formId, a, b, "", childDiv, header[0].innerHTML, "print-selection-indent-2");
                        }
                    }
                }
                var display = false;
                for (const ele of Object.values(window.printCheckboxes[formId].children)) {
                    if (Object.keys(ele.children).length > 1) {
                        ele.display = true;
                        display = true;
                    }
                }

                if(display || Object.keys(window.printCheckboxes[formId].children).length > 1) {
                    for (const ele of Object.values(window.printCheckboxes[formId].children)) {
                        printSelection.appendChild(ele.div);
                        if (ele.display || Object.keys(ele.children).length > 1) {
                            for (const childElement of Object.values(ele.children)) {
                                printSelection.appendChild(childElement.div);
                            }
                        }
                    }
                }
            }
        }

        function isHiddenForm(form) {
            var hidden = false;
            for (var j = 0; j < 1000; j++) {
                if (form.className.includes("hidden")) {
                    hidden = true;
                    break;
                }
                if (form.parentElement.id === "report-form") {
                    break;
                } else {
                    form = form.parentElement;
                }
            }
            return hidden;
        }

        function addPrintCheckbox(formId, subIndex, childIndex, type, formElement, text, className) {

            var wrapDiv = document.createElement("div");
            if(className !== null && className.length > 0) {
                wrapDiv.className = className;
            }
            var printCheckbox = document.createElement("input");
            printCheckbox.type = "checkbox";
            printCheckbox.checked = true;
            wrapDiv.appendChild(printCheckbox);
            if(type === "main") {
                window.printCheckboxes[formId] = { div: wrapDiv, checkbox: printCheckbox, children: {} };
                formElement.classList.add("print-main-form-group-" + formId);
            } else if(type === "sub") {
                if(window.printCheckboxes[formId] !== null) {
                    window.printCheckboxes[formId].children[subIndex] = { div: wrapDiv, checkbox: printCheckbox, children: {} };
                    formElement.classList.add("print-sub-form-group-" + formId + "-" + subIndex);
                }
            } else {
                if(window.printCheckboxes[formId] !== null && window.printCheckboxes[formId].children[subIndex] !== null) {
                    window.printCheckboxes[formId].children[subIndex].children[childIndex] = { div: wrapDiv, checkbox: printCheckbox };
                    formElement.classList.add("print-form-group-" + formId + "-" + subIndex + "-" + childIndex);
                }
            }

            var span = document.createElement("span");
            span.innerHTML = text;
            wrapDiv.appendChild(span);

            printCheckbox.onchange = function() {
                if(printCheckbox.checked) {
                    formElement.classList.remove("no-print");
                    if (type === "main") {
                        //Check all boxes at lower levels
                        for (const [subIndex, element] of Object.entries(window.printCheckboxes[formId].children)) {
                            const eles = document.getElementsByClassName("print-sub-form-group-" + formId + "-" + subIndex);
                            if (eles !== null) {
                                eles[0].classList.remove("no-print");
                            }
                            element.checkbox.checked = true;
                            for(const [childIndex, childElement] of Object.entries(element.children)) {
                                const eles = document.getElementsByClassName("print-form-group-" + formId + "-" + subIndex + "-" + childIndex);
                                if (eles !== null) {
                                    eles[0].classList.remove("no-print");
                                }
                                childElement.checkbox.checked = true;
                            }
                        }
                    } else if(type === "sub") {
                        if (window.printCheckboxes[formId] !== null) {
                            //Check the box at the upper level
                            const eles = document.getElementsByClassName("print-main-form-group-" + formId);
                            if (eles !== null) {
                                eles[0].classList.remove("no-print");
                            }
                            window.printCheckboxes[formId].checkbox.checked = true;

                            //Check all boxes at lower level
                            if (window.printCheckboxes[formId].children[subIndex] !== null) {
                                for(const [childIndex, childElement] of Object.entries(window.printCheckboxes[formId].children[subIndex].children)) {
                                    const eles = document.getElementsByClassName("print-form-group-" + formId + "-" + subIndex + "-" + childIndex);
                                    if (eles !== null) {
                                        eles[0].classList.remove("no-print");
                                    }
                                    childElement.checkbox.checked = true;
                                }
                            }
                        }
                    } else {
                        if (window.printCheckboxes[formId] !== null) {
                            //Check the box at the upper level
                            const eles = document.getElementsByClassName("print-main-form-group-" + formId);
                            if (eles !== null) {
                                eles[0].classList.remove("no-print");
                            }
                            window.printCheckboxes[formId].checkbox.checked = true;

                            //Check the box one level higher
                            if (window.printCheckboxes[formId].children[subIndex] !== null) {
                                const eles = document.getElementsByClassName("print-sub-form-group-" + formId + "-" + subIndex);
                                if (eles !== null) {
                                    eles[0].classList.remove("no-print");
                                }
                                window.printCheckboxes[formId].children[subIndex].checkbox.checked = true;
                            }
                        }
                    }
                } else {
                    formElement.classList.add("no-print");
                    if(type === "main") {
                        //Uncheck all boxes at lower levels
                        for (const [subIndex, element] of Object.entries(window.printCheckboxes[formId].children)) {
                            const eles = document.getElementsByClassName("print-sub-form-group-" + formId + "-" + subIndex);
                            if (eles !== null) {
                                eles[0].classList.add("no-print");
                            }
                            element.checkbox.checked = false;
                            for(const [childIndex, childElement] of Object.entries(element.children)) {
                                const eles = document.getElementsByClassName("print-form-group-" + formId + "-" + subIndex + "-" + childIndex);
                                if (eles !== null) {
                                    eles[0].classList.add("no-print");
                                }
                                childElement.checkbox.checked = false;
                            }
                        }
                    } else if(type === "sub") {
                        if (window.printCheckboxes[formId] !== null) {
                            //Uncheck all boxes at lower level
                            if (window.printCheckboxes[formId].children[subIndex] !== null) {
                                for(const [childIndex, childElement] of Object.entries(window.printCheckboxes[formId].children[subIndex].children)) {
                                    const eles = document.getElementsByClassName("print-form-group-" + formId + "-" + subIndex + "-" + childIndex);
                                    if (eles !== null) {
                                        eles[0].classList.add("no-print");
                                    }
                                    childElement.checkbox.checked = false;
                                }
                            }
                            //Uncheck the box at the upper level if all boxes at this level are unchecked
                            var allUnchecked = true;
                            for (const element of Object.values(window.printCheckboxes[formId].children)) {
                                if(element.checkbox.checked) {
                                    allUnchecked = false;
                                    break;
                                }
                            }
                            if(allUnchecked) {
                                const eles = document.getElementsByClassName("print-main-form-group-" + formId);
                                if (eles !== null) {
                                    eles[0].classList.remove("no-print");
                                }
                                window.printCheckboxes[formId].checkbox.checked = false;
                            }
                        }
                    } else {
                        //Uncheck the box at the higher level if all boxes at this level are unchecked
                        if (window.printCheckboxes[formId] !== null) {
                            if (window.printCheckboxes[formId].children[subIndex] !== null) {
                                var allUnchecked1 = true;
                                for (const element of Object.values(window.printCheckboxes[formId].children[subIndex].children)) {
                                    if (element.checkbox.checked) {
                                        allUnchecked1 = false;
                                        break;
                                    }
                                }
                                if (allUnchecked1) {
                                    const eles = document.getElementsByClassName("print-sub-form-group-" + formId + "-" + subIndex);
                                    if (eles !== null) {
                                        eles[0].classList.remove("no-print");
                                    }
                                    window.printCheckboxes[formId].children[subIndex].checkbox.checked = false;

                                    //Uncheck the box at the upper level if all boxes at the higher level are unchecked
                                    var allUnchecked2 = true;
                                    for (const element of Object.values(window.printCheckboxes[formId].children)) {
                                        if(element.checkbox.checked) {
                                            allUnchecked2 = false;
                                            break;
                                        }
                                    }
                                    if(allUnchecked2) {
                                        const eles = document.getElementsByClassName("print-main-form-group-" + formId);
                                        if (eles !== null) {
                                            eles[0].classList.remove("no-print");
                                        }
                                        window.printCheckboxes[formId].checkbox.checked = false;
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }
    {% endif %}
};

window.drawingEnabled = false;
window.numberOverlays = true;
window.layerSelectExpanded = false;
window.groupSameDamages = {{ prefilled_data.group_same_damages is defined ? (prefilled_data.group_same_damages == 'on' ? 'true' : 'false') : 'true' }};

window.images = {{ images | json_encode | raw }};
window.currentImage = '{{ default_image }}';
window.currentImageHash = '{{ default_image_hash }}';
var hist = {{ annotation_history | json_encode | raw }};
console.log(hist);

window.annoIds = [];
window.annotationHistory = {};
window.addedAnnotations = {};
window.deletedAnnotations = {};
window.annotationsVisible = {};

for(var i = 0; i < window.images.length; i++) {
    var hash = window.images[i].hash;
    window.annotationsVisible[hash] = {};
    {% if not readonly %}
        window.annotationHistory[hash] = {
            '999999999': { 'timestamp': '', 'editor': '' }
        };
        window.addedAnnotations[hash] = {
            '999999999': {}
        };
        window.deletedAnnotations[hash] = {
            '999999999': []
        };
    {% else %}
        window.annotationHistory[hash] = {};
        window.addedAnnotations[hash] = {};
        window.deletedAnnotations[hash] = {};
    {% endif %}
}

for(const image in hist) {
    for(const reportId in hist[image]) {
        window.annotationHistory[image][reportId] = hist[image][reportId];
    }
}

var deletedAnnos = {{ deleted_annotations | json_encode | raw }};
for(const image in deletedAnnos) {
    for(const reportId in deletedAnnos[image]) {
        var deletedIds = [];
        for(const id in deletedAnnos[image][reportId]) {
            deletedIds.push(id);
        }
        window.deletedAnnotations[image][reportId] = deletedIds;
    }
}

//Translate the body of each annotation where possible
var annotations = {{ annotations | json_encode | raw }};
{% for image_hash, image in annotations %}
{% for report_id, annotations in image %}
{% for annotation_id, annotation in annotations %}
{% if annotation.body is defined and annotation.body is not empty %}
{% for index, body in annotation.body %}
{% set translation = body.value | trans %}
annotations['{{ image_hash }}']['{{ report_id }}']['{{ annotation_id }}'].body[{{ index }}].value = '{{ translation }}';
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}
for(const imageHash in annotations) {
    for(const reportId in annotations[imageHash]) {
        var reportAnnos = {};
        var histEle = document.getElementById('annos-' + imageHash + '-' + reportId);
        var printHistEleDiv = document.getElementById('annos-print-' + imageHash + '-' + reportId);
        var histEleDiv = null;
        if(histEle != null) {
            histEleDiv = histEle.querySelector('div');
        }
        for(const id in annotations[imageHash][reportId]) {
            reportAnnos[id] = annotations[imageHash][reportId][id];
            var styleClass = null;
            if(reportAnnos[id].hasOwnProperty('target') && reportAnnos[id].target.hasOwnProperty('styleClass')) {
                styleClass = reportAnnos[id].target.styleClass;
            }
            var damageAlreadyExists = false;
            if (!window.annoIds.hasOwnProperty(id) && reportAnnos[id].hasOwnProperty('body')) {
                var text = '';
                if(reportAnnos[id].hasOwnProperty('body')) {
                    for(var i = 0; i < reportAnnos[id].body.length; i++) {
                        if(reportAnnos[id].body[i].hasOwnProperty('value') && reportAnnos[id].body[i].value != null) {
                            text += (text !== '' ? '<br/>' : '') + reportAnnos[id].body[i].value;
                        }
                    }
                }

                var groupedNumber = 1;
                var deleted = isAnnotationDeleted(id, imageHash);
                for(const [annoId, anno] of Object.entries(window.annoIds)) {
                    if(anno.reportId === reportId && anno.text === text && anno.layers === styleClass) {
                        groupedNumber = anno.groupedNumber;
                        damageAlreadyExists = true;
                        if(window.groupSameDamages && !deleted) {
                            const spans = document.getElementsByClassName('anno-hist-' + annoId);
                            if (spans !== null) {
                                for (var i = 0; i < spans.length; i++) {
                                    spans[i].classList.add('anno-hist-' + id);
                                }
                            }
                        }
                        break;
                    }
                }
                var ungroupedNumber = groupedNumber;
                var highestGroupedNumber = groupedNumber;
                for(const [annoId, anno] of Object.entries(window.annoIds)) {
                    if (anno.ungroupedNumber >= ungroupedNumber) {
                        ungroupedNumber = anno.ungroupedNumber + 1;
                    }
                    if (anno.groupedNumber >= highestGroupedNumber) {
                        highestGroupedNumber = anno.groupedNumber + 1;
                    }
                }
                if(!damageAlreadyExists || deleted) {
                    groupedNumber = highestGroupedNumber;
                }

                window.annoIds[id] = {
                    'reportId': reportId,
                    'groupedNumber': groupedNumber,
                    'ungroupedNumber': ungroupedNumber,
                    'text': text,
                    'layers': styleClass
                };
                if(!window.groupSameDamages || !damageAlreadyExists || deleted) {
                    if(histEleDiv != null) {
                        addAnnoHistSpan(histEleDiv, printHistEleDiv, id, reportAnnos[id].body, styleClass, true);
                    }
                }
            }
        }
        window.addedAnnotations[imageHash][reportId] = reportAnnos;
    }
}

for(const image in deletedAnnos) {
    for(const reportId in deletedAnnos[image]) {
        var histEle_ = document.getElementById('annos-' + image + '-' + reportId);
        var histEleDiv_ = null;
        if(histEle_ != null) {
            histEleDiv_ = histEle_.querySelector('div');
        }
        var printHistEleDiv_ = document.getElementById('annos-print-' + image + '-' + reportId);
        for(const id in deletedAnnos[image][reportId]) {
            if(histEleDiv_ != null) {
                addAnnoHistSpan(histEleDiv_, printHistEleDiv_, id, null, null, false);
            }
        }
    }
}

for (const id in window.annotationHistory[window.currentImageHash]) {
    window.annotationsVisible[window.currentImageHash][id] = true;
}
window.allAnnotationsVisible = true;

function groupUngroupSameDamages(checked) {
    window.groupSameDamages = checked;
    clickedThumbnail(window.currentImageHash, window.currentImage)
}

{% if not readonly %}

document.addEventListener("click", closeLayerCheckboxes);

function closeLayerCheckboxes(ele) {
    var layerCheckboxes = document.getElementById('layer-over-select');
    var checkboxes = document.getElementById('layer-checkboxes');
    if (layerCheckboxes != null && checkboxes != null && (ele == null || ele.target == null || ele.target !== layerCheckboxes && ele.target !== checkboxes && ele.target.parentNode !== checkboxes && !(ele.target.parentNode != null && ele.target.parentNode.parentNode === checkboxes))) {
        checkboxes.style.display = 'none';
        window.layerSelectExpanded = false;
    }
}

function showLayerCheckboxes() {
    var checkboxes = document.getElementById('layer-checkboxes');
    window.layerSelectExpanded = !window.layerSelectExpanded;
    if (window.layerSelectExpanded) {
        checkboxes.style.display = 'block';
    } else {
        checkboxes.style.display = 'none';
    }
}

function checkLayerCheckbox(element) {
    var checkboxSupport = document.getElementById('layer-support');
    var checkboxSupportingMedium = document.getElementById('layer-supporting-medium');
    var checkboxPaintLayer = document.getElementById('layer-paint-layer');
    var checkboxFinishingLayer = document.getElementById('layer-finishing-layer');
    var checkboxFrame = document.getElementById('layer-frame');
    if(checkboxSupport != null && checkboxPaintLayer != null && checkboxFinishingLayer != null && checkboxFrame != null) {
        if(checkboxFrame.checked && element === checkboxFrame) {
            checkboxSupport.checked = false;
            checkboxSupportingMedium.checked = false;
            checkboxPaintLayer.checked = false;
            checkboxFinishingLayer.checked = false;
            window.annoConf.styleClass = 'condition-orange';
        } else if(checkboxSupport.checked) {
            checkboxFrame.checked = false;
            if(checkboxPaintLayer.checked) {
                if(checkboxFinishingLayer.checked) {
                    if(checkboxSupportingMedium.checked) {
                        window.annoConf.styleClass = 'condition-red-green-blue-yellow';
                    } else {
                        window.annoConf.styleClass = 'condition-red-green-blue';
                    }
                } else {
                    if(checkboxSupportingMedium.checked) {
                        window.annoConf.styleClass = 'condition-red-blue-yellow';
                    } else {
                        window.annoConf.styleClass = 'condition-red-blue';
                    }
                }
            } else if(checkboxFinishingLayer.checked) {
                if(checkboxSupportingMedium.checked) {
                    window.annoConf.styleClass = 'condition-green-blue-yellow';
                } else {
                    window.annoConf.styleClass = 'condition-green-blue';
                }
            } else {
                if(checkboxSupportingMedium.checked) {
                    window.annoConf.styleClass = 'condition-blue-yellow';
                } else {
                    window.annoConf.styleClass = 'condition-blue';
                }
            }
        } else if(checkboxPaintLayer.checked) {
            checkboxFrame.checked = false;
            if(checkboxFinishingLayer.checked) {
                if(checkboxSupportingMedium.checked) {
                    window.annoConf.styleClass = 'condition-red-green-yellow';
                } else {
                    window.annoConf.styleClass = 'condition-red-green';
                }
            } else {
                if(checkboxSupportingMedium.checked) {
                    window.annoConf.styleClass = 'condition-red-yellow';
                } else {
                    window.annoConf.styleClass = 'condition-red';
                }
            }
        } else if(checkboxFinishingLayer.checked) {
            checkboxFrame.checked = false;
            if(checkboxSupportingMedium.checked) {
                window.annoConf.styleClass = 'condition-green-yellow';
            } else {
                window.annoConf.styleClass = 'condition-green';
            }
        } else if(checkboxSupportingMedium.checked) {
            checkboxFrame.checked = false;
            window.annoConf.styleClass = 'condition-yellow';
        }
    }
}

function selectedImageToAdd(selectElement) {
    var addImageDivInput = document.getElementById('add-image-div');
    switch(selectElement.options[selectElement.selectedIndex].value) {
        case 'camera': {
            addImageDivInput.classList.remove('load-new-image-button');
            selectElement.classList.remove('add-image-select-url');
            document.getElementById('annotate-camera').click();
            selectElement.selectedIndex = 0;
            break;
        }
        case 'device': {
            addImageDivInput.classList.remove('load-new-image-button');
            selectElement.classList.remove('add-image-select-url');
            document.getElementById('annotate-file').click();
            selectElement.selectedIndex = 0;
            break;
        }
        case 'url': {
            addImageDivInput.classList.add('load-new-image-button');
            selectElement.classList.add('add-image-select-url');
            var addImageUrl = document.getElementById('add-image-url');
            addImageUrl.placeholder = '{{ 'Insert image URL ...' | trans }}';
            addImageUrl.value = '';
            break;
        }
        case 'iiif': {
            addImageDivInput.classList.add('load-new-image-button');
            selectElement.classList.add('add-image-select-url');
            var addImageUrl = document.getElementById('add-image-url');
            addImageUrl.placeholder = '{{ 'Insert IIIF image URL ...' | trans }}';
            addImageUrl.value = '';
            break;
        }
        default: {
            addImageDivInput.classList.remove('load-new-image-button');
            selectElement.classList.remove('add-image-select-url');
            const images = {{ annotation_schema_images | json_encode | raw }};
            if(images.hasOwnProperty(selectElement.options[selectElement.selectedIndex].value)) {
                const image = images[selectElement.options[selectElement.selectedIndex].value];
                addImage({ 'hash': image.hash, 'image': '{{ annotation_image_relative_path }}' + image.image, 'thumbnail': '{{ annotation_image_relative_path }}' + image.image });
            }
            selectElement.selectedIndex = 0;
            break;
        }
    }
}

function triggerImageAdd() {
    var selectElement = document.getElementById('add-image-select');
    switch(selectElement.options[selectElement.selectedIndex].value) {
        case 'iiif': {
            var value = document.getElementById('add-image-url').value;
            if (value !== '') {
                loadIIIFImage();
            }
            break;
        }
        case 'url': {
            var value = document.getElementById('add-image-url').value;
            if (value != '') {
                loadImage();
            }
            break;
        }
    }
}

function loadIIIFImage() {
    const xhr = new XMLHttpRequest();
    document.getElementById('add-image-url').placeholder = '{{ 'IIIF image is being loaded ...' | trans }}';
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            document.getElementById('add-image-url').placeholder = '';
            const response = JSON.parse(xhr.responseText);
            addImage(response);
        }
    };
    xhr.open('GET', '/{{ app.request.locale }}/loadiiifimage?report=1&image=' + encodeURIComponent(document.getElementById('add-image-url').value));
    xhr.send();
    document.getElementById('add-image-url').value = '';
    document.getElementById('add-image-select').selectedIndex = 0;
    document.getElementById('add-image-div').classList.remove('load-new-image-button');
}

function loadImage() {
    const xhr = new XMLHttpRequest();
    document.getElementById('add-image-url').placeholder = '{{ 'Image is being downloaded ...' | trans }}';
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            document.getElementById('add-image-url').placeholder = '';
            const response = JSON.parse(xhr.responseText);
            console.log(response);
            if(response.hash == null && response.error != null) {
                alert("Error: " + response.error);
            } else {
                addImage(response);
            }
        }
    };
    xhr.open('GET', '/{{ app.request.locale }}/download?image=' + encodeURIComponent(document.getElementById('add-image-url').value));
    xhr.send();
    document.getElementById('add-image-url').value = '';
    document.getElementById('add-image-select').selectedIndex = 0;
    document.getElementById('add-image-div').classList.remove('load-new-image-button');
}

function confirmDeleteImage(hash) {
    if(confirm('{{ 'Are you sure you want to delete this image and its annotations?' | trans }}')) {
        var ele = document.getElementById('thumbnail-image-' + hash);
        if(ele != null) {
            ele.parentNode.removeChild(ele);
            if(window.currentImageHash === hash) {
                window.allAnnotationsVisible = true;
                resetAnnotations();
                var div = document.getElementById('annotation-history-timestamps');
                while (div.firstChild) {
                    div.removeChild(div.firstChild);
                }
                window.osd_anno.world.removeAll();
            }
            delete window.annotationHistory[hash];
            delete window.addedAnnotations[hash];
            delete window.deletedAnnotations[hash];
        }
        var hiddenImageInput = document.getElementById('hidden-image-' + hash);
        if(hiddenImageInput != null) {
            hiddenImageInput.parentNode.removeChild(hiddenImageInput);
        }
    }
}

function addImage(image) {

    if(image.hash == null) {
        return;
    }

    window.images.push(image);
    window.annotationHistory[image.hash] = {
        '999999999': { 'timestamp': '', 'editor': '' }
    };
    window.addedAnnotations[image.hash] = {
        '999999999': {}
    };
    window.deletedAnnotations[image.hash] = {
        '999999999': []
    };
    window.annotationsVisible[image.hash] = {
        '999999999': true
    };

    const inputDiv = document.createElement('input');
    inputDiv.type = 'hidden';
    inputDiv.name = 'images[]';
    inputDiv.id = 'hidden-image-' + image.hash;
    inputDiv.value = JSON.stringify(image);
    document.getElementById('hidden-images').appendChild(inputDiv);

    const img = document.createElement('img');
    img.className = 'thumbnail-image-img';
    img.src = image.thumbnail;
    img.alt = '';
    img.onclick = function() {
        clickedThumbnail(image.hash, image.image);
    };

    const deleteButton = document.createElement('div');
    deleteButton.className = 'delete-image-button';
    deleteButton.onclick = function() {
        confirmDeleteImage(image.hash);
    };
    deleteButton.innerHTML = '<svg class="trash-background-image" height="33" width="33"><rect width="33" height="33" rx="4" fill="white"></rect></svg><i class="fas fa-trash-alt trash-icon"></i>';

    const thumbnailDiv = document.createElement('div');
    thumbnailDiv.className = 'thumbnail-image';
    thumbnailDiv.id = 'thumbnail-image-' + image.hash;
    thumbnailDiv.appendChild(img);
    thumbnailDiv.appendChild(deleteButton);

    document.getElementById('thumbnails').appendChild(thumbnailDiv);
}

function selectedDamageType(selectElement) {
    window.annoConf.damageType = selectElement.options[selectElement.selectedIndex].value;
}
{% endif %}

function clickedThumbnail(hash, image) {
    window.allAnnotationsVisible = true;
    resetAnnotations();

    var div = document.getElementById('annotation-history-timestamps');
    if(div != null) {
        while (div.firstChild) {
            div.removeChild(div.firstChild);
        }
        var ids = [];
        for (const id in window.annotationHistory[hash]) {
            ids.push(id);
        }
        for (var i = ids.length - 1; i >= 0; i--) {
            const reportId = ids[i];
            var newDiv = document.createElement('div');
            newDiv.id = 'annos-' + hash + '-' + reportId;
            var button = document.createElement('button');
            button.onclick = function () {
                toggleAnnotations(reportId);
            };
            button.type = 'button';
            button.id = 'show-hide-annos-' + hash + '-' + reportId;
            button.className = 'hide';
            var iEye = document.createElement('i');
            iEye.className = 'far fa-eye';
            var span = document.createElement('span');
            span.class = 'text-align-left';
            if (reportId === '999999999') {
                span.innerHTML = '{{ 'Current annotations' | trans }}';
                newDiv.className = 'show-hide-current-annos';
            } else {
                span.innerHTML = window.annotationHistory[hash][reportId]['editor'] + '<br/><i>' + window.annotationHistory[hash][reportId]['timestamp'] + '</i>';
            }
            button.appendChild(iEye);
            button.appendChild(span);
            newDiv.appendChild(button);

            var spanDiv = document.createElement('div');
            spanDiv.className = 'annotations-list';
            newDiv.appendChild(spanDiv);

            if (hash in window.addedAnnotations) {
                if (reportId in window.addedAnnotations[hash]) {
                    var alreadyChecked = [];
                    const annos = window.addedAnnotations[hash][reportId];
                    for (const id in annos) {
                        if (annos[id].hasOwnProperty('body')) {
                            newDiv.style = 'display: block';
                            var styleClass = null;
                            if(annos[id].hasOwnProperty('target') && annos[id].target.hasOwnProperty('styleClass')) {
                                styleClass = annos[id].target.styleClass;
                            }
                            var text = '';
                            for(var j = 0; j < annos[id].body.length; j++) {
                                if(annos[id].body[j].hasOwnProperty('value') && annos[id].body[j].value != null) {
                                    text += (text !== '' ? '<br/>' : '') + annos[id].body[j].value;
                                }
                            }
                            var deleted = isAnnotationDeleted(id, hash);
                            if(window.annoIds.hasOwnProperty(id)) {
                                if(!deleted && window.groupSameDamages) {
                                    if(!alreadyChecked.includes(text)) {
                                        alreadyChecked.push(text);
                                        addAnnoHistSpan(spanDiv, null, id, annos[id].body, styleClass, true);
                                    }
                                } else {
                                    addAnnoHistSpan(spanDiv, null, id, annos[id].body, styleClass, true);
                                }
                            } else {
                                var damageAlreadyExists = false;
                                var groupedNumber = 1;
                                if(!deleted) {
                                    for (const [annoId, anno] of Object.entries(window.annoIds)) {
                                        if (anno.reportId === reportId && anno.text === text && anno.layers === styleClass) {
                                            groupedNumber = anno.groupedNumber;
                                            damageAlreadyExists = true;
                                            const spans = document.getElementsByClassName('anno-hist-' + annoId);
                                            if (spans !== null) {
                                                for (var k = 0; k < spans.length; k++) {
                                                    spans[k].classList.add('anno-hist-' + id);
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                                var ungroupedNumber = groupedNumber;
                                var highestGroupedNumber = groupedNumber;
                                for (const [annoId, anno] of Object.entries(window.annoIds)) {
                                    if (anno.ungroupedNumber >= ungroupedNumber) {
                                        ungroupedNumber = anno.ungroupedNumber + 1;
                                    }
                                    if (anno.groupedNumber >= highestGroupedNumber) {
                                        highestGroupedNumber = anno.groupedNumber + 1;
                                    }
                                }
                                if (!damageAlreadyExists) {
                                    groupedNumber = highestGroupedNumber;
                                }

                                window.annoIds[id] = {
                                    'reportId': reportId,
                                    'groupedNumber': groupedNumber,
                                    'ungroupedNumber': ungroupedNumber,
                                    'text': text,
                                    'layers': styleClass
                                };
                                if (!window.groupSameDamages || !damageAlreadyExists) {
                                    addAnnoHistSpan(spanDiv, null, id, annos[id].body, styleClass, true);
                                }
                            }
                        }
                    }
                }
            }
            if (hash in window.deletedAnnotations) {
                if (reportId in window.deletedAnnotations[hash]) {
                    var annos = window.deletedAnnotations[hash][reportId];
                    for (var l = 0; l < annos.length; l++) {
                        newDiv.style = 'display: block';
                        addAnnoHistSpan(spanDiv, null, annos[l], null, null, false);
                    }
                }
            }
            div.appendChild(newDiv);
        }
    }

    if(window.currentImageHash !== hash) {
        if (image.endsWith('/info.json')) {
            window.osd_anno.open({
                'tileSource': image
            });
        } else {
            window.osd_anno.open({
                'tileSource': {
                    'type': 'image',
                    'url': image
                }
            });
        }
    }

    window.currentImage = image;
    window.currentImageHash = hash;
    window.allAnnotationsVisible = false;
    resetAnnotations();
}

function isAnnotationDeleted(id, imageHash) {
    if (imageHash in window.deletedAnnotations) {
        for (const reportId in window.deletedAnnotations[imageHash]) {
            const annos = window.deletedAnnotations[imageHash][reportId];
            for (var j = 0; j < annos.length; j++) {
                if (annos[j] === id) {
                    return true;
                }
            }
        }
    }
    return false;
}

function addNumberOverlays(osd, imageHash, type, remove) {
    if(osd.world.getItemAt(0) === undefined) {
        return;
    }

    if(remove) {
        for (var i = 0; i < window.overlays.length; i++) {
            osd.removeOverlay(window.overlays[i].id);
            var ele = document.getElementById(window.overlays[i].id);
            if (ele != null) {
                ele.parentElement.removeChild(ele);
            }
        }
        window.overlays = [];

        if (!window.numberOverlays) {
            return;
        }
    }

    var annoEles = osd.element.getElementsByClassName('a9s-annotation');
    for (var j = 0; j < annoEles.length; j++) {
        if (annoEles[j].hasAttribute('data-id')) {
            var annoId = annoEles[j].getAttribute('data-id');
            if (window.annoIds.hasOwnProperty(annoId)) {
                var number = window.groupSameDamages ? window.annoIds[annoId].groupedNumber : window.annoIds[annoId].ungroupedNumber;
                var width = 15;
                var n = number;
                while(n > 0) {
                    n = Math.floor(n / 10);
                    width += 11;
                }

                var id = 'annotation-number-overlay-' + imageHash + '-' + type + '-' + annoId;
                var bbox = annoEles[j].getBBox();

                var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                svg.setAttribute('id', id);
                svg.setAttribute('width', width);
                svg.setAttribute('height', 26);

                var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                rect.setAttribute('class', 'annotation-number-' + number);
                rect.setAttribute('width', width);
                rect.setAttribute('height', 26);
                rect.setAttribute('rx', 13);
                rect.setAttribute('fill', 'white');

                var text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                text.setAttribute('x', 7);
                text.setAttribute('y', 20);
                text.setAttribute('style', 'font-size: 20px');
                text.innerHTML = number;

                svg.appendChild(rect);
                svg.appendChild(text);

                document.getElementById('overlays').appendChild(svg);

                var point = new OpenSeadragon.Point(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);
                point = osd.world.getItemAt(0).imageToViewportCoordinates(point);
                var overlay = { id: id, x: point.x, y: point.y, placement: 'CENTER', checkResize: false };
                osd.addOverlay(overlay);
                if(remove) {
                    window.overlays.push(overlay);
                }

                svg.style.display = 'block';
            }
        }
    }

}

function addAnnoHistSpan(div, printDiv, id, body, styleClass, added) {
    var groupedNumber = null;
    var ungroupedNumber = null;
    if(window.annoIds.hasOwnProperty(id)) {
        groupedNumber = window.annoIds[id].groupedNumber;
        ungroupedNumber = window.annoIds[id].ungroupedNumber;
    }
    var divsToAdd = [];
    var printDivsToAdd = [];
    if (styleClass != null && added) {
        var layers = [];
        switch (styleClass) {
            case 'condition-red':
            case 'condition-green':
            case 'condition-blue':
            case 'condition-yellow':
            case 'condition-orange':
                layers.push(styleClass);
                break;
            case 'condition-red-green':
                layers.push('condition-red');
                layers.push('condition-green');
                break;
            case 'condition-red-blue':
                layers.push('condition-red');
                layers.push('condition-blue');
                break;
            case 'condition-red-yellow':
                layers.push('condition-red');
                layers.push('condition-yellow');
                break;
            case 'condition-green-blue':
                layers.push('condition-green');
                layers.push('condition-blue');
                break;
            case 'condition-green-yellow':
                layers.push('condition-green');
                layers.push('condition-yellow');
                break;
            case 'condition-blue-yellow':
                layers.push('condition-blue');
                layers.push('condition-yellow');
                break;
            case 'condition-red-green-blue':
                layers.push('condition-red');
                layers.push('condition-green');
                layers.push('condition-blue');
                break;
            case 'condition-red-green-yellow':
                layers.push('condition-red');
                layers.push('condition-green');
                layers.push('condition-yellow');
                break;
            case 'condition-red-blue-yellow':
                layers.push('condition-red');
                layers.push('condition-blue');
                layers.push('condition-yellow');
                break;
            case 'condition-green-blue-yellow':
                layers.push('condition-green');
                layers.push('condition-blue');
                layers.push('condition-yellow');
                break;
            case 'condition-red-green-blue-yellow':
                layers.push('condition-red');
                layers.push('condition-green');
                layers.push('condition-blue');
                layers.push('condition-yellow');
                break;
        }
        divsToAdd = addLayersToDiv(layers, div);
        if (printDiv !== null) {
            printDivsToAdd = addLayersToDiv(layers, printDiv);
        }
    } else {
        divsToAdd.push(div);
        if (printDiv !== null) {
            printDivsToAdd.push(printDiv);
        }
    }
    addDivsToHistory(divsToAdd, id, added, body, groupedNumber, ungroupedNumber, false);
    if (printDiv !== null) {
        addDivsToHistory(printDivsToAdd, id, added, body, groupedNumber, ungroupedNumber, true);
    }
}

function addDivsToHistory(divsToAdd, id, added, body, groupedNumber, ungroupedNumber, print) {

    var number = window.groupSameDamages ? groupedNumber : ungroupedNumber;

    for(var i = 0; i < divsToAdd.length; i++) {
        var span = document.createElement('div');
        if (added) {
            if(!print) {
                span.className = 'anno-hist anno-hist-' + id;
            } else {
                span.className = 'anno-hist';
            }

            var deleted = false;
            if(isAnnotationDeleted(id, window.currentImageHash)) {
                deleted = true;
                if(print) {
                    span.className = 'anno-hist-deleted';
                } else {
                    span.className += ' anno-hist-deleted';
                }
            }
            span.innerHTML = getHistorySpanText(body, number, deleted);
        } else {
            span.className = 'anno-hist-deleted';
            if (number === null) {
                span.innerHTML = '({{ 'Deleted' | trans }})';
            } else {
                {% if app.request.locale == 'en' %}
                span.innerHTML = '({{ 'Deleted' | trans }} ' + number + '.)';
                {% else %}
                span.innerHTML = '(' + number + '. {{ 'deleted' | trans }})';
                {% endif %}
            }
        }
        if(!print && number !== null) {
            span.onmouseover = function () {
                const outerEles = document.getElementsByClassName('a9s-outer');
                for (var i = 0; i < outerEles.length; i++) {
                    for(const [annoId, anno] of Object.entries(window.annoIds)) {
                        if ((window.groupSameDamages && anno.groupedNumber === groupedNumber || !window.groupSameDamages && anno.ungroupedNumber === ungroupedNumber)
                            && outerEles[i].parentElement.getAttribute('data-id') === annoId) {
                            outerEles[i].parentElement.classList.add('selected');
                        }
                    }
                }
                for(const [annoId, anno] of Object.entries(window.annoIds)) {
                    if (window.groupSameDamages && anno.groupedNumber === groupedNumber || !window.groupSameDamages && anno.ungroupedNumber === ungroupedNumber) {
                        const spans = document.getElementsByClassName('anno-hist-' + annoId);
                        if(spans !== null) {
                            for(var i = 0; i < spans.length; i++) {
                                spans[i].classList.add('anno-hist-hover');
                            }
                        }
                    }
                }
                const eles = document.getElementsByClassName('annotation-number-' + number);
                if (eles != null) {
                    for(var i = 0; i < eles.length; i++) {
                        eles[i].classList.add('highlighted-number');
                    }
                }
            };
            span.onmouseout = function () {
                const outerEles = document.getElementsByClassName('a9s-outer');
                for (var i = 0; i < outerEles.length; i++) {
                    for(const [annoId, anno] of Object.entries(window.annoIds)) {
                        if ((window.groupSameDamages && anno.groupedNumber === groupedNumber || !window.groupSameDamages && anno.ungroupedNumber === ungroupedNumber)
                            && outerEles[i].parentElement.getAttribute('data-id') === annoId) {
                            outerEles[i].parentElement.classList.remove('selected');
                        }
                    }
                }
                for(const [annoId, anno] of Object.entries(window.annoIds)) {
                    if (window.groupSameDamages && anno.groupedNumber === groupedNumber || !window.groupSameDamages && anno.ungroupedNumber === ungroupedNumber) {
                        var spans = document.getElementsByClassName('anno-hist-' + annoId);
                        if (spans !== null) {
                            for (var i = 0; i < spans.length; i++) {
                                spans[i].classList.remove('anno-hist-hover');
                            }
                        }
                    }
                }
                const eles = document.getElementsByClassName('annotation-number-' + number);
                if (eles != null) {
                    for(var i = 0; i < eles.length; i++) {
                        eles[i].classList.remove('highlighted-number');
                    }
                }
            };
            span.onclick = function () {
                var annotation = window.anno.selectAnnotation(id);
                if (annotation !== undefined) {
                    var spans = document.getElementsByClassName('anno-hist-' + id);
                    if(spans !== null) {
                        for(var i = 0; i < spans.length; i++) {
                            spans[i].classList.add('anno-hist-hover');
                        }
                    }
                    if (number !== null) {
                        const eles = document.getElementsByClassName('annotation-number-' + number);
                        if (eles != null) {
                            for(var i = 0; i < eles.length; i++) {
                                eles[i].classList.add('highlighted-number');
                            }
                        }
                    }
                    if(annotation.hasOwnProperty('body')) {
                        {% if not readonly %}
                            new MutationObserver((mutations, obs) => {
                                var toDelete = document.querySelectorAll("div.r6o-editable-text");
                                for(var i = 0; i < toDelete.length; i++) {
                                    toDelete[i].parentElement.removeChild(toDelete[i]);
                                }
                                var comments = document.querySelectorAll("textarea.r6o-editable-text:not(.r6o-nodrag)");
                                if (comments.length > 0 && comments.length === annotation.body.length) {
                                    for(var i = 0; i < annotation.body.length; i++) {
                                        if(annotation.body[i].hasOwnProperty('value') && window.damageTypes.hasOwnProperty(annotation.body[i].value)) {
                                            const newDiv = document.createElement('div');
                                            newDiv.className = 'r6o-editable-text';
                                            if(window.damageTypes[annotation.body[i].value].aat !== '') {
                                                newDiv.innerHTML = '<div class="annotation-span-div"><a class="aat-link" href="' + window.damageTypes[annotation.body[i].value].aat + '" title="' + window.damageTypes[annotation.body[i].value].note + '" target="_blank">' + comments[i].value + "</a></div>";
                                            } else {
                                                newDiv.innerHTML = '<div class="annotation-span-div"><span title="' + window.damageTypes[annotation.body[i].value].note + '">' + comments[i].value + "</span></div>";
                                            }
                                            const comment = comments[i];
                                            const parentElement = comments[i].parentElement;
                                            comments[i].classList.add("hidden");
                                            if(parentElement.childNodes.length === 0) {
                                                parentElement.appendChild(newDiv);
                                            } else {
                                                parentElement.insertBefore(newDiv, parentElement.firstChild);
                                            }
                                            new MutationObserver((mutationList, obser) => {
                                                if(newDiv.parentElement === null) {
                                                    obser.disconnect();
                                                } else {
                                                    for (const mutation of mutationList) {
                                                        if (mutation.type === "attributes" && mutation.attributeName === "disabled") {
                                                            comment.classList.remove("hidden");
                                                            newDiv.parentElement.removeChild(newDiv);
                                                            obser.disconnect();
                                                        }
                                                    }
                                                }
                                            }).observe(comment, { 'attributes': true });
                                        }
                                    }
                                }
                                obs.disconnect();
                            }).observe(document, { childList: true, subtree: true });
                        {% else %}
                            new MutationObserver((mutations, obs) => {
                                var toDelete = document.querySelectorAll("div.custom-r6o-comment");
                                for(var i = 0; i < toDelete.length; i++) {
                                    toDelete[i].parentElement.removeChild(toDelete[i]);
                                }
                                var comments = document.querySelectorAll("div.r6o-readonly-comment");
                                if(comments.length > 0 && comments.length === annotation.body.length) {
                                    for(var i = 0; i < annotation.body.length; i++) {
                                        if(annotation.body[i].hasOwnProperty('value') && window.damageTypes.hasOwnProperty(annotation.body[i].value)) {
                                            const newDiv = document.createElement('div');
                                            newDiv.className = "custom-r6o-comment";
                                            if(window.damageTypes[annotation.body[i].value].aat !== '') {
                                                newDiv.innerHTML = '<a class="aat-link" href="' + window.damageTypes[annotation.body[i].value].aat + '" title="' + window.damageTypes[annotation.body[i].value].note + '" target="_blank">' + comments[i].innerHTML + "</a>";
                                            } else {
                                                newDiv.innerHTML = '<span title="' + window.damageTypes[annotation.body[i].value].note + '">' + comments[i].innerHTML + "</span>";
                                            }
                                            const parentElement = comments[i].parentElement;
                                            comments[i].classList.add("hidden");
                                            if(parentElement.childNodes.length === 0) {
                                                parentElement.appendChild(newDiv);
                                            } else {
                                                parentElement.insertBefore(newDiv, parentElement.firstChild);
                                            }
                                        }
                                    }
                                }
                                obs.disconnect();
                            }).observe(document, { childList: true, subtree: true });
                        {% endif %}
                    }
                }
            };
        }
        if (divsToAdd[i].childNodes.length < 2) {
            divsToAdd[i].appendChild(span);
        } else {
            divsToAdd[i].insertBefore(span, divsToAdd[i].firstChild.nextSibling);
        }
    }
}

function getHistorySpanText(body, number, deleted) {
    var text = null;
    if(body != null) {
        for(var j = 0; j < body.length; j++) {
            if(body[j].hasOwnProperty('value') && body[j].value != null && body[j].value !== '') {
                var note = '';
                if(window.damageTypes.hasOwnProperty(body[j].value)) {
                    note = window.damageTypes[body[j].value].note;
                }
                if (text == null) {
                    if(deleted) {
                        text = '<span class="anno-text anno-hist-deleted-span"';
                    } else {
                        text = '<span class="anno-text"';
                    }
                    if(note !== '') {
                        text += ' title="' + note + '"';
                    }
                    text += '>' + body[j].value;
                } else {
                    if(deleted) {
                        text = text + '<br/><span class="italic anno-hist-deleted-span"';
                    } else {
                        text = text + '<br/><span class="italic"';
                    }
                    if(note !== '') {
                        text += ' title="' + note + '"';
                    }
                    text += '>' + body[j].value + '</span>';
                }
            }
        }
    }
    if (number === null) {
        return text;
    } else if(text == null) {
        if(deleted) {
            return '<span class="anno-number anno-hist-deleted-span">' + number + '.</span>';
        } else {
            return '<span class="anno-number">' + number + '.</span>';
        }
    } else {
        if(deleted) {
            return '<span class="anno-number anno-hist-deleted-span">' + number + '. </span>' + text + '</span>';
        } else {
            return '<span class="anno-number">' + number + '. </span>' + text + '</span>';
        }
    }
}

function addLayersToDiv(layers, div) {
    var divsToAdd = [];
    for(var i = 0; i < layers.length; i++) {
        var layerDiv = div.querySelector('.' + layers[i]);
        if (layerDiv == null) {
            layerDiv = document.createElement('div');
            layerDiv.className = layers[i];
            var nameSpan = document.createElement('span');
            nameSpan.className = 'anno-hist-layer-span';
            layerDiv.appendChild(nameSpan);
            switch(layers[i]) {
                case 'condition-blue': {
                    nameSpan.innerHTML = '{{ 'Support' | trans }}';
                    if(div.childNodes.length === 0) {
                        div.appendChild(layerDiv);
                    } else {
                        div.insertBefore(layerDiv, div.firstChild);
                    }
                    break;
                }
                case 'condition-yellow': {
                    nameSpan.innerHTML = '{{ 'Supporting medium' | trans }}';
                    var frame = div.querySelector('.condition-red');
                    if (frame != null) {
                        div.insertBefore(layerDiv, frame);
                    } else {
                        frame = div.querySelector('.condition-green');
                        if (frame != null) {
                            div.insertBefore(layerDiv, frame);
                        } else {
                            frame = div.querySelector('.condition-orange');
                            if (frame != null) {
                                div.insertBefore(layerDiv, frame);
                            } else {
                                div.appendChild(layerDiv);
                            }
                        }
                    }
                    break;
                }
                case 'condition-red': {
                    nameSpan.innerHTML = '{{ 'Pictorial layer' | trans }}';
                    var finishingLayer = div.querySelector('.condition-green');
                    if (finishingLayer != null) {
                        div.insertBefore(layerDiv, finishingLayer);
                    } else {
                        var frame = div.querySelector('.condition-orange');
                        if (frame != null) {
                            div.insertBefore(layerDiv, frame);
                        } else {
                            div.appendChild(layerDiv);
                        }
                    }
                    break;
                }
                case 'condition-green': {
                    nameSpan.innerHTML = '{{ 'Varnish/Protection layer' | trans }}';
                    var frame = div.querySelector('.condition-orange');
                    if (frame != null) {
                        div.insertBefore(layerDiv, frame);
                    } else {
                        div.appendChild(layerDiv);
                    }
                    break;
                }
                case 'condition-orange':
                    nameSpan.innerHTML = '{{ 'Frame' | trans }}';
                    div.appendChild(layerDiv);
                    break;
            }
        }
        divsToAdd.push(layerDiv);
    }
    return divsToAdd;
}

function refreshAnnotations(viewer, osd, imageHash, type, remove) {
    var annotations = {};
    window.annotationNumber = 1;
    for (const id in window.annotationHistory[window.currentImageHash]) {
        if(!remove || window.annotationsVisible[window.currentImageHash][id]) {
            if (id in window.deletedAnnotations[window.currentImageHash]) {
                for (const delId of window.deletedAnnotations[window.currentImageHash][id]) {
                    delete annotations[delId];
                }
            }
            if (id in window.addedAnnotations[window.currentImageHash]) {
                for (const [annoId, anno] of Object.entries(window.addedAnnotations[window.currentImageHash][id])) {
                    annotations[annoId] = anno;
                }
            }
        }
    }
    var annos = [];
    for(const [ annoId, anno ] of Object.entries(annotations)) {
        annos.push(anno);
    }
    viewer.setAnnotations(annos);
    addNumberOverlays(osd, imageHash, type, remove);
}

function toggleAnnotations(id) {
    window.annotationsVisible[window.currentImageHash][id] = !window.annotationsVisible[window.currentImageHash][id];
    var buttonId = 'show-hide-annos-' + window.currentImageHash + '-' + id;
    var showAnnotationsButton = document.getElementById(buttonId);
    if(!window.annotationsVisible[window.currentImageHash][id]) {
        showAnnotationsButton.classList.remove('hide');
        showAnnotationsButton.classList.add('show');
    } else {
        showAnnotationsButton.classList.remove('show');
        showAnnotationsButton.classList.add('hide');
    }

    var allVisible = true;
    for(const id in window.annotationHistory[window.currentImageHash]) {
        if(!window.annotationsVisible[window.currentImageHash][id]) {
            allVisible = false;
            break;
        }
    }
    window.allAnnotationsVisible = allVisible;
    setShowHideAllButton();
    refreshAnnotations(window.anno, window.osd_anno, window.currentImageHash, 'viewer', true);
}

function setShowHideAllButton() {
    var showAllAnnotationsButton = document.getElementById('show-hide-all-annos');
    if(showAllAnnotationsButton != null) {
        if (window.allAnnotationsVisible) {
            showAllAnnotationsButton.innerHTML = '<i class="far fa-eye"></i><span>{{ 'Hide all' | trans }}</span>';
            showAllAnnotationsButton.classList.remove('show');
            showAllAnnotationsButton.classList.add('hide');
        } else {
            showAllAnnotationsButton.innerHTML = '<i class="far fa-eye"></i><span>{{ 'Show all' | trans }}</span>';
            showAllAnnotationsButton.classList.remove('hide');
            showAllAnnotationsButton.classList.add('show');
        }
    }
}

function toggleNumberOverlays(osd) {
    window.numberOverlays = !window.numberOverlays;
    var numberOverlaysButton = document.getElementById('show-hide-numbers');
    if(window.numberOverlays) {
        numberOverlaysButton.innerHTML = '<i class="far fa-eye"></i><span>1</span>';
        numberOverlaysButton.classList.remove('show');
        numberOverlaysButton.classList.add('hide');
    } else {
        numberOverlaysButton.innerHTML = '<i class="far fa-eye"></i><span>1</span>';
        numberOverlaysButton.classList.remove('hide');
        numberOverlaysButton.classList.add('show');
    }
    addNumberOverlays(osd, window.currentImageHash, 'viewer', true);
}

function resetAnnotations() {
    window.allAnnotationsVisible = !window.allAnnotationsVisible;
    setShowHideAllButton();
    for (const id in window.annotationHistory[window.currentImageHash]) {
        window.annotationsVisible[window.currentImageHash][id] = window.allAnnotationsVisible;
        var showAllButton = document.getElementById('show-hide-annos-' + window.currentImageHash + '-' + id);
        if(window.allAnnotationsVisible) {
            showAllButton.classList.remove('show');
            showAllButton.classList.add('hide');
        } else {
            showAllButton.classList.remove('hide');
            showAllButton.classList.add('show');
        }
    }
    refreshAnnotations(window.anno, window.osd_anno, window.currentImageHash, 'viewer', true);
}

{% if not readonly %}
    function setDrawingTool(drawingTool) {
        if(!window.annotationsVisible[window.currentImageHash]['999999999']) {
            toggleAnnotations('999999999');
        }
        window.anno.setDrawingTool(drawingTool);
        window.anno.setDrawingEnabled(true);
        window.drawingEnabled = true;

        var drawingToolButtons = document.getElementsByName('drawing-tools');

        for (var i = 0; i < drawingToolButtons.length; i++) {
            if (drawingToolButtons[i].value === drawingTool) {
                drawingToolButtons[i].classList.add('drawing-tool-active');
                drawingToolButtons[i].classList.remove('drawing-tool-inactive');
            } else {
                drawingToolButtons[i].classList.add('drawing-tool-inactive');
                drawingToolButtons[i].classList.remove('drawing-tool-active');
            }
        }
    }

    var colours = document.querySelectorAll('input[name="choose-colour"]');

    for (var i = 0; i < colours.length; i++) {
        colours[i].onchange = chooseColour;
    }

    var style = document.createElement('style');

    function chooseColour() {
        for (var i = 0; i < colours.length; i++) {
            if (colours[i] === this) {
                selectedColour = colours[i].value;
                if (selectedColour === 'red') {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(255,0,0) !important;
                        }
                    `;
                } else if (selectedColour === 'green') {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(0,255,0) !important;
                        }
                    `;
                } else if (selectedColour === 'blue') {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(0,0,255) !important;
                        }
                    `;
                } else if (selectedColour === 'orange') {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(255,165,0) !important;
                        }
                    `;
                }
                document.head.appendChild(style);
            }
        }
    }

    window.setInterval(function() {
        if (window.drawingEnabled && !window.anno._app.current.annotationLayer.mouseTracker.isTracking()) {
            //Code to stop drawing and reset shape and damage type (currently not used anymore)
            window.drawingEnabled = false;
            var buttons = document.getElementsByClassName('drawing-tool-active');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.add('drawing-tool-inactive');
                buttons[i].classList.remove('drawing-tool-active');
            }
/*            var selectElements = document.getElementsByClassName('annotation-select');
            for (var j = 0; j < selectElements.length; j++) {
                selectElements[j].selectedIndex = 0;
            }
            window.annoConf.damageType = '';*/
        }
    }, 100);
{% endif %}
</script>

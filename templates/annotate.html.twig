<div id="annotate-form"{% if not readonly %} class="form-tab"{% endif %}>
    {% if readonly %}
    <div class="report-header">{{ 'Annotations' | trans }}</div>
    {% endif %}
    <div id="annotation-form">
        <div id="annotation-history">
            {% set default_image = '' %}
            {% set has_history = false %}
            {% for image in images %}
                <input type="hidden" name="images[]" value="{{ image | json_encode | replace({'"': '\\"'}) }}">
                {% if annotation_history[image.hash] is defined %}
                    {% for id, timestamp in annotation_history[image.hash] %}
                        {% set has_history = true %}
                    {% endfor %}
                {% endif %}
            {% endfor %}
            {% if has_history or not readonly %}
                {% for image in images %}
                    {% if loop.first %}
                        {% set default_image = image.hash %}
                        <div id="history">
                            <button type="button" onclick="resetAnnotations();" class="show-all" id="show-hide-all-annos"><i class="far fa-eye"></i><span>{{ 'Show all' | trans }}</span></button>
                            <div id="annotation-history-timestamps">
                                {% if not readonly %}
                                    <button type="button" onclick="toggleAnnotations('999999999')" id="show-hide-annos-{{ image.hash }}-999999999" class="hide">
                                        <i class="far fa-eye"></i>
                                        <span>{{ 'Current annotations' | trans }}</span>
                                    </button>
                                {% endif %}
                                {% if annotation_history[image.hash] is defined %}
                                    {% for id, timestamp in annotation_history[image.hash] %}
                                        <button type="button" onclick="toggleAnnotations('{{ id }}')" id="show-hide-annos-{{ image.hash }}-{{ id }}" class="hide">
                                            <i class="far fa-eye"></i>
                                            <span>{{ timestamp }}</span>
                                        </button>
                                    {% endfor %}
                                {% endif %}
                            </div>
                        </div>
                    {% endif %}
                {% endfor %}
            {% endif %}
        </div>
        <div id="annotation-tools">
            {% if not readonly %}
                <div>
                    <!--<p>Vorm: </p>-->
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('rect');" value="rect">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30 30" style="enable-background:new 0 0 30 30;" xml:space="preserve">
                            <path d="M25.8,4.2v21.6H4.2V4.2H25.8 M30,0H0v30h30V0L30,0z"/>
                        </svg>
                    </button>
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('polygon');" value="polygon">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 34.6 30" style="enable-background:new 0 0 34.6 30;" xml:space="preserve">
                            <path d="M23.6,4.2L29.8,15l-6.2,10.8H11.1L4.8,15l6.2-10.8H23.6 M26,0H8.7L0,15l8.7,15H26l8.7-15L26,0L26,0z"/>
                        </svg>
                    </button>
                    <!--<button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('circle');" value="recirclect">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30 30" style="enable-background:new 0 0 30 30;" xml:space="preserve">
                            <path d="M15,4.2C21,4.2,25.8,9,25.8,15S21,25.8,15,25.8S4.2,21,4.2,15S9,4.2,15,4.2 M15,0C6.7,0,0,6.7,0,15s6.7,15,15,15
                                s15-6.7,15-15S23.3,0,15,0L15,0z"/>
                        </svg>
                    </button>-->
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('ellipse');" value="ellipse">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30 30" style="enable-background:new 0 0 30 30;" xml:space="preserve">
                            <path d="M15,4.2C21,4.2,25.8,9,25.8,15S21,25.8,15,25.8S4.2,21,4.2,15S9,4.2,15,4.2 M15,0C6.7,0,0,6.7,0,15s6.7,15,15,15
                                s15-6.7,15-15S23.3,0,15,0L15,0z"/>
                        </svg>
                    </button>
                    <button class="drawing-tool-inactive" name="drawing-tools" type="button" onclick="setDrawingTool('freehand');" value="freehand">
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             viewBox="0 0 30.3 30" style="enable-background:new 0 0 30.3 30;" xml:space="preserve">
                            <path d="M2.9,6.5c1.2-1.2,2.3-2.3,2.9-2c0.8,0.3,0,1.7-0.5,2.5c-0.4,0.7-4.8,6.5-4.8,10.5c0,2.1,0.8,3.9,2.2,5
                                c1.3,0.9,2.9,1.2,4.4,0.8c1.8-0.5,3.3-2.3,5.1-4.6c2-2.5,4.7-5.7,6.8-5.7c2.7,0,2.8,1.7,2.9,3c-6.3,1.1-9,6.1-9,9
                                c0,2.8,2.4,5.2,5.4,5.2c2.7,0,7.2-2.2,7.8-10.2h4.1v-4.2h-4.1c-0.3-2.8-1.8-7-6.7-7c-3.8,0-7,3.2-8.2,4.7c-1,1.2-3.4,4.1-3.8,4.5
                                c-0.4,0.5-1.1,1.4-1.9,1.4c-0.8,0-1.2-1.4-0.6-3.2c0.6-1.8,2.3-4.8,3.1-5.9c1.3-1.9,2.2-3.2,2.2-5.5C10.2,1.2,7.5,0,6,0
                                C3.8,0,1.9,1.7,1.5,2.1C0.9,2.7,0.4,3.2,0,3.6L2.9,6.5z M18.4,25.9c-0.5,0-1.2-0.4-1.2-1.2c0-1,1.2-3.7,4.8-4.6
                                C21.5,24.6,19.6,25.9,18.4,25.9z"/>
                        </svg>
                    </button>
                </div>
                <div>
                    <!--<p>Kleur: </p>-->
                    <input type="radio" onclick="window.annoConf.styleColor='red'; window.annoConf.styleClass='condition-' + window.annoConf.styleFill + 'red';" id="choose-colour-red" name="choose-colour" value="red" checked/>
                    <label for="choose-colour-red"></label>
                    <input type="radio" onclick="window.annoConf.styleColor='green'; window.annoConf.styleClass='condition-' + window.annoConf.styleFill + 'green';" id="choose-colour-green" name="choose-colour" value="green"/>
                    <label for="choose-colour-green"></label>
                    <input type="radio" onclick="window.annoConf.styleColor='blue'; window.annoConf.styleClass='condition-' + window.annoConf.styleFill + 'blue';" id="choose-colour-blue" name="choose-colour" value="blue"/>
                    <label for="choose-colour-blue"></label>
                    <input type="radio" onclick="window.annoConf.styleColor='orange'; window.annoConf.styleClass='condition-' + window.annoConf.styleFill + 'orange';" id="choose-colour-orange" name="choose-colour" value="orange"/>
                    <label for="choose-colour-orange"></label>
                </div>
                <div>
                    <!--<p>Opvulling: </p>-->
                    <select id="fill-dropdown" onchange="selectDropdown()">
                        <option value="">Geen opvulling</option>
                        <option value="rect">Geen opvulling</option>
                        <option value="diagonal-rect">Geen opvulling</option>
                        <option value="disconnected-cross">Geen opvulling</option>
                    </select>
                </div>
            {% endif %}
            {% if readonly and prefilled_data.manifest is defined %}
                <a id="iiif-manifest-url" href="{{ prefilled_data.manifest }}">IIIF Manifest</a>
            {% endif %}
        </div>

        <div id="annotation-viewer">
            <div id="openseadragon-annotorious">
                <!-- Patterns that can be used in the annotations -->
                <svg style="position: absolute; top: -9999px; left: -9999px;">
                    <pattern id="rect-red" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="red" x1="0" y1="0" x2="0" y2="{{ pattern_size }}" stroke-width="{{ stroke_width * 2 }}"></line>
                        <line stroke="red" x1="{{ pattern_size }}" y1="0" x2="0" y2="0" stroke-width="{{ stroke_width * 2}}"></line>
                    </pattern>
                    <pattern id="diagonal-rect-red" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="red" x1="0" y1="0" x2="{{ pattern_size }}" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="red" x2="0" y1="0" y2="{{ pattern_size }}" x1="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="disconnected-cross-red" patternUnits="userSpaceOnUse" width="{{ pattern_size * 5 / 4 }}px" height="{{ pattern_size * 3 / 2 }}px">
                        <line stroke="red" x1="0" y1="0" x2="{{ pattern_size * 4 / 5 }}" y2="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="red" x2="0" y1="0" y2="{{ pattern_size * 4 / 5 }}" x1="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="rect-green" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="green" x1="0" y1="0" x2="0" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="green" x1="{{ pattern_size }}" y1="0" x2="0" y2="0" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="diagonal-rect-green" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="green" x1="0" y1="0" x2="{{ pattern_size }}" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="green" x2="0" y1="0" y2="{{ pattern_size }}" x1="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="disconnected-cross-green" patternUnits="userSpaceOnUse" width="{{ pattern_size * 5 / 4 }}px" height="{{ pattern_size }}px">
                        <line stroke="green" x1="0" y1="0" x2="{{ pattern_size * 4 / 5 }}" y2="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="green" x2="0" y1="0" y2="{{ pattern_size * 4 / 5 }}" x1="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="rect-orange" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="orange" x1="0" y1="0" x2="0" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="orange" x1="{{ pattern_size }}" y1="0" x2="0" y2="0" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="diagonal-rect-orange" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="orange" x1="0" y1="0" x2="{{ pattern_size }}" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="orange" x2="0" y1="0" y2="{{ pattern_size }}" x1="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="disconnected-cross-orange" patternUnits="userSpaceOnUse" width="{{ pattern_size * 5 / 4 }}px" height="{{ pattern_size }}px">
                        <line stroke="orange" x1="0" y1="0" x2="{{ pattern_size * 4 / 5 }}" y2="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="orange" x2="0" y1="0" y2="{{ pattern_size * 4 / 5 }}" x1="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="rect-blue" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="blue" x1="0" y1="0" x2="0" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="blue" x1="{{ pattern_size }}" y1="0" x2="0" y2="0" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="diagonal-rect-blue" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
                        <line stroke="blue" x1="0" y1="0" x2="{{ pattern_size }}" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="blue" x2="0" y1="0" y2="{{ pattern_size }}" x1="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                    <pattern id="disconnected-cross-blue" patternUnits="userSpaceOnUse" width="{{ pattern_size * 5 / 4 }}px" height="{{ pattern_size }}px">
                        <line stroke="blue" x1="0" y1="0" x2="{{ pattern_size * 4 / 5 }}" y2="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                        <line stroke="blue" x2="0" y1="0" y2="{{ pattern_size * 4 / 5 }}" x1="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
                    </pattern>
                </svg>
            </div>
            {% if readonly %}
                {% for image in images %}
                    <div id="openseadragon-annotorious-print-{{ image.hash }}" class="openseadragon-annotorious-print"></div>
                {% endfor %}
            {% endif %}
        </div>

        {% if images | length > 1 or not readonly %}
            <div id="annotation-images">
                {% if not readonly %}
                    <div id="add-images">
                        <select>
                            <option value="" selected disabled hidden>{{ 'Add image' | trans }}</option>
                            <option value="iiif">{{ 'From IIIF image URL' | trans }}</option>
                            <option value="url">{{ 'From image URL' | trans }}</option>
                            <option value="device">{{ 'From device' | trans }}</option>
                            <option value="camera">{{ 'From camera' | trans }}</option>
                        </select>
                    </div>
                {% endif %}
                <div id="thumbnails">
                    {% for image in images %}
                        <div onclick="clickedThumbnail('{{ image.hash }}', '{{ image.image}}')">
                            <img src="{{ image.thumbnail }}" alt="">
                        </div>
                    {% endfor %}
                </div>
                {% if not readonly %}
                    <label for="annotate-iiif-image">{{ 'Add IIIF image URL' | trans }}</label>
                    <input type="text" id="annotate-iiif-image">
                    <button type="button" onclick="loadIIIFImage()">{{ 'Load' | trans }}</button>
                    <label for="annotate-image">{{ 'Add image URL' | trans }}</label>
                    <input type="text" id="annotate-image">
                    <button type="button" onclick="loadImage()">{{ 'Load' | trans }}</button>

                    <input type="file" id="annotate-file" name="annotate-file" accept="image/*">
                    <label id="annotate-file-label" for="annotate-file">
                        <span id="annotate-file-progress"></span>
                        <i class="fas fa-plus"></i>
                    </label>

                    <input type="file" id="annotate-camera" name="annotate-file" accept="image/*" capture="environment">
                    <label id="annotate-camera-label" for="annotate-camera">
                        <span id="annotate-camera-progress"></span>
                        <i class="fas fa-camera"></i>
                    </label>

                    <input type="hidden" id="annotation_data" name="annotation_data">
                {% endif %}
            </div>
        {% endif %}
    </div>

    <!--<button type="button" id="print-button" onclick="if(window.isPrinting) return; window.isPrinting = true; window.osd.viewport.goHome(true); setTimeout(function(){ window.isPrinting = false; window.print(); }, 100);">Printen</button>-->

    {% if not readonly %}
        <div class="buttons">
            <div class="previous-button">
                <button type="button" onclick="showDiv('recommendations-form')">{{ 'Previous' | trans }}</button>
            </div>
            <!--<div class="send-button">
                <input type="submit" value="Rapport verzenden">
            </div>-->
        </div>
    {% endif %}
</div>

<script>

function loadIIIFImage() {
    const xhr = new XMLHttpRequest();
    document.getElementById('annotate-iiif-image').placeholder = "{{ 'IIIF image is being loaded ...' | trans }}";
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            document.getElementById('annotate-iiif-image').placeholder = "";
            const response = JSON.parse(xhr.responseText);
            addImage(response);
        }
    };
    xhr.open('GET', '/{{ app.request.locale }}/loadiiifimage?report=1&image=' + encodeURIComponent(document.getElementById('annotate-iiif-image').value));
    xhr.send();
    document.getElementById('annotate-iiif-image').value = "";
}

function loadImage() {
    const xhr = new XMLHttpRequest();
    document.getElementById('annotate-image').placeholder = "{{ 'Image is being downloaded ...' | trans }}";
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            document.getElementById('annotate-image').placeholder = "";
            const response = JSON.parse(xhr.responseText);
            addImage(response);
        }
    };
    xhr.open('GET', '/{{ app.request.locale }}/download?image=' + encodeURIComponent(document.getElementById('annotate-image').value));
    xhr.send();
    document.getElementById('annotate-image').value = "";
}

function clickedThumbnail(hash, image) {
    window.allAnnotationsVisible = true;
    resetAnnotations();

    var div = document.getElementById("annotation-history-timestamps");
    while (div.firstChild) {
        div.removeChild(div.firstChild);
    }
    var ids = [];
    for(const id in window.annotationHistory[hash]) {
        ids.push(id);
    }
    for(var i = ids.length - 1; i >= 0; i--) {
        var button = document.createElement("button");
        const id = ids[i];
        button.onclick = function () {
            toggleAnnotations(id);
        };
        button.type = "button";
        button.id = "show-hide-annos-" + hash + "-" + id;
        button.className = "hide";
        var iEye = document.createElement("i");
        iEye.className = "far fa-eye";
        var span = document.createElement("span");
        if(id === '999999999') {
            span.innerHTML = "Huidige annotaties";
        } else {
            span.innerHTML = window.annotationHistory[hash][id];
        }
        button.appendChild(iEye);
        button.appendChild(span);
        div.appendChild(button);
    }

    window.osd_anno.world.removeAll();
    if(image.endsWith('/info.json')) {
        window.osd_anno.addTiledImage({
            'tileSource': image
        });
    } else {
        window.osd_anno.addTiledImage({
            'tileSource': {
                'type': 'image',
                'url': image
            }
        });
    }


    window.currentImage = hash;
    window.allAnnotationsVisible = false;
    resetAnnotations();
}

$('input#annotate-file').change(function() {

    $(this).simpleUpload("/{{ app.request.locale }}/upload", {

        start: function(file) {
            document.getElementById('annotate-file').value = "";
            document.getElementById('annotate-file-progress').innerHTML = "Uploading...";
        },

        progress: function(progress){
            //received progress
            document.getElementById('annotate-file-progress').innerHTML = Math.round(progress) + "%";
            console.log("upload progress: " + Math.round(progress) + "%");
        },

        success: function(data){
            //upload successful
            document.getElementById('annotate-file-progress').innerHTML = "";
            console.log("upload successful!");
            console.log(data);

            addImage(data);
        },

        error: function(error){
            //upload failed
            console.log(error);
            document.getElementById('annotate-file-progress').innerHTML = "";
            console.log("upload error: " + error.name + ": " + error.message);
        }
    });
});

$('input#annotate-camera').change(function() {

    $(this).simpleUpload("/{{ app.request.locale }}/upload", {

        start: function(file) {
            document.getElementById('annotate-camera').value = "";
            document.getElementById('annotate-camera-progress').innerHTML = "Uploading...";
        },

        progress: function(progress){
            //received progress
            document.getElementById('annotate-camera-progress').innerHTML = Math.round(progress) + "%";
            console.log("upload progress: " + Math.round(progress) + "%");
        },

        success: function(data){
            //upload successful
            document.getElementById('annotate-camera-progress').innerHTML = "";
            console.log("upload successful!");
            console.log(data);

            addImage(data);
        },

        error: function(error){
            //upload failed
            console.log(error);
            document.getElementById('annotate-camera-progress').innerHTML = "";
            console.log("upload error: " + error.name + ": " + error.message);
        }
    });
});

function addImage(image) {

    if(image.hash == null) {
        return;
    }

    window.annotationHistory[image.hash] = {
        '999999999': ""
    };
    window.addedAnnotations[image.hash] = {
        '999999999': ""
    };
    window.deletedAnnotations[image.hash] = {
        '999999999': []
    };
    window.annotationsVisible[image.hash] = {
        '999999999': true
    };

    const inputDiv = document.createElement("input");
    inputDiv.type = "hidden";
    inputDiv.name = "images[]";
    inputDiv.value = JSON.stringify(image);
    document.getElementById("thumbnails").appendChild(inputDiv);

    const thumbnailDiv = document.createElement("div");
    thumbnailDiv.onclick = function() {
        clickedThumbnail(image.hash, image.image);
    };
    thumbnailDiv.innerHTML = '<img src="' + image.thumbnail + '" alt="">';
    document.getElementById("thumbnails").appendChild(thumbnailDiv);
}

window.onload = function() {
    window.osd_anno = OpenSeadragon({
        id: "openseadragon-annotorious",
        tileSources: [
            {% for image in images %}
                {% if loop.first %}
                    {% if image.image ends with '/info.json' %}
                        '{{ image.image }}'
                    {% else %}
                        {
                            'type': 'image',
                            'url': '{{ image.image }}'
                        }
                    {% endif %}
                {% endif %}
            {% endfor %}
        ]
    });

    window.annoConf = {
        locale: 'auto',
        styleColor: 'red',
        styleFill: '',
        styleClass: 'condition-red'
    };

    window.anno = OpenSeadragon.Annotorious(window.osd_anno, window.annoConf);

    Annotorious.SelectorPack(window.anno, {});

    //TODO set proper auth info
    window.anno.setAuthInfo({
        id: 'http://www.example.com/hero-solutions',
        displayName: 'Hero Solutions'
    });

    refreshAnnotations(window.anno);

    {% if not readonly %}
        document.forms[0].addEventListener('submit', function() {
            if(!window.annotationsVisible[window.currentImage]["999999999"]) {
                toggleAnnotations("999999999");
            }
            storeCurrentAnnotations();
            document.body.onbeforeunload = '';
            var annotations = {};
            for(var i = 0; i < window.images.length; i++) {
                var hash = window.images[i].hash;
                annotations[hash] = {};
                for (const id in window.annotationHistory[hash]) {
                    if (id in window.deletedAnnotations[hash]) {
                        for (const delId of window.deletedAnnotations[hash][id]) {
                            delete annotations[hash][delId];
                        }
                    }
                    if (id in window.addedAnnotations[hash]) {
                        for (const [annoId, anno] of Object.entries(window.addedAnnotations[hash][id])) {
                            annotations[hash][annoId] = anno;
                        }
                    }
                }
            }
            document.getElementById("annotation_data").value = JSON.stringify(annotations);
        });
        var objectTypeSelect = document.getElementById("object-type-select");
        if (objectTypeSelect != null) {
            objectTypeSelect.selectedIndex = 0;
        }
    {% else %}
        var cur = window.currentImage;
        {% for image in images %}
            var annoPrint{{ image.hash }} = OpenSeadragon.Annotorious(OpenSeadragon({
                id: "openseadragon-annotorious-print-{{ image.hash }}",
                tileSources: [
                    {% if image.image ends with '/info.json' %}
                        '{{ image.image }}'
                    {% else %}
                        {
                            'type': 'image',
                            'url': '{{ image.image }}'
                        }
                    {% endif %}
                ]
            }), {});

            window.currentImage = '{{ image.hash }}';
            refreshAnnotations(annoPrint{{ image.hash }});
        {% endfor %}
        window.currentImage = cur;

        var headers = document.getElementsByClassName("report-header");

        for (var i = 0; i < headers.length; i++) {
            var nextSibling = headers[i].nextElementSibling;

            if (typeof nextSibling !== 'undefined' && nextSibling.className === "form-group") {
                var groupDiv = document.createElement("div");

                groupDiv.className = "nobreak";

                headers[i].parentElement.insertBefore(groupDiv, headers[i]);

                groupDiv.appendChild(headers[i]);
                groupDiv.appendChild(nextSibling);
            }
        }
    {% endif %}
};

window.drawingEnabled = false;

window.images = {{ images | json_encode | raw }};
window.currentImage = '{{ default_image }}';
var hist = {{ annotation_history | json_encode | raw }};

window.annoIds = [];
window.annotationHistory = {};
window.addedAnnotations = {};
window.deletedAnnotations = {};
window.annotationsVisible = {};

for(var i = 0; i < window.images.length; i++) {
    var hash = window.images[i].hash;
    window.annotationsVisible[hash] = {};
    {% if not readonly %}
        window.annotationHistory[hash] = {
            '999999999': ""
        };
        window.addedAnnotations[hash] = {
            '999999999': {}
        };
        window.deletedAnnotations[hash] = {
            '999999999': []
        };
    {% else %}
        window.annotationHistory[hash] = {};
        window.addedAnnotations[hash] = {};
        window.deletedAnnotations[hash] = {};
    {% endif %}
}

for(const image in hist) {
    for(const reportId in hist[image]) {
        window.annotationHistory[image][reportId] = hist[image][reportId];
    }
}

var annotations = {{ annotations | json_encode | raw }};
for(const image in annotations) {
    for(const reportId in annotations[image]) {
        var reportAnnos = {};
        for(const id in annotations[image][reportId]) {
            reportAnnos[id] = JSON.parse(annotations[image][reportId][id]);
            if (!window.annoIds.includes(id)) {
                window.annoIds.push(id);
            }
        }
        window.addedAnnotations[image][reportId] = reportAnnos;
    }
}

var deletedAnnos = {{ deleted_annotations | json_encode | raw }};
for(const image in deletedAnnos) {
    for(const reportId in deletedAnnos[image]) {
        var deleted = [];
        for(const id in deletedAnnos[image][reportId]) {
            deleted.push(id);
        }
        window.deletedAnnotations[image][reportId] = deleted;
    }
}
for (const id in window.annotationHistory[window.currentImage]) {
    window.annotationsVisible[window.currentImage][id] = true;
}
window.allAnnotationsVisible = true;

function refreshAnnotations(viewer) {
    var annotations = {};
    for (const id in window.annotationHistory[window.currentImage]) {
        if(window.annotationsVisible[window.currentImage][id]) {
            if (id in window.deletedAnnotations[window.currentImage]) {
                for (const delId of window.deletedAnnotations[window.currentImage][id]) {
                    delete annotations[delId];
                }
            }
            if (id in window.addedAnnotations[window.currentImage]) {
                for (const [annoId, anno] of Object.entries(window.addedAnnotations[window.currentImage][id])) {
                    annotations[annoId] = anno;
                }
            }
        }
    }
    var arr = [];
    for(const [ annoId, anno ] of Object.entries(annotations)) {
        arr.push(anno);
    }
    viewer.setAnnotations(arr);
}

function toggleAnnotations(id) {
    storeCurrentAnnotations();
    window.annotationsVisible[window.currentImage][id] = !window.annotationsVisible[window.currentImage][id];
    var buttonId = "show-hide-annos-" + window.currentImage + "-" + id;
    console.log(buttonId);
    var showAnnotationsButton = document.getElementById(buttonId);
    if(!window.annotationsVisible[window.currentImage][id]) {
        //showAnnotationsButton.innerHTML = "Toon";
        showAnnotationsButton.classList.remove("hide");
        showAnnotationsButton.classList.add("show");
    } else {
        //hideAnnotationsButton.innerHTML = "Verberg";
        showAnnotationsButton.classList.remove("show");
        showAnnotationsButton.classList.add("hide");
    }

    var allVisible = true;
    for(const id in window.annotationHistory[window.currentImage]) {
        if(!window.annotationsVisible[window.currentImage][id]) {
            allVisible = false;
            break;
        }
    }
    window.allAnnotationsVisible = allVisible;
    setShowHideAllButton();
    refreshAnnotations(window.anno);
}

function setShowHideAllButton() {
    var showAllAnnotationsButton = document.getElementById("show-hide-all-annos");
    if(window.allAnnotationsVisible) {
        showAllAnnotationsButton.innerHTML = '<i class="far fa-eye"></i><span>{{ 'Hide all' | trans }}</span>';
        showAllAnnotationsButton.classList.remove("show");
        showAllAnnotationsButton.classList.add("hide");
    } else {
        showAllAnnotationsButton.innerHTML = '<i class="far fa-eye"></i><span>{{ 'Show all' | trans }}</span>';
        showAllAnnotationsButton.classList.remove("hide");
        showAllAnnotationsButton.classList.add("show");
    }
}

function storeCurrentAnnotations() {
    {% if not readonly %}
        if(window.annotationsVisible[window.currentImage]["999999999"]) {
            window.addedAnnotations[window.currentImage]["999999999"] = {};
            var annos = window.anno.getAnnotations();
            for (var i = 0; i < annos.length; i++) {
                if (!window.annoIds.includes(annos[i].id)) {
                    window.addedAnnotations[window.currentImage]["999999999"][annos[i].id] = annos[i];
                }
            }
        }
    {% endif %}
}

function resetAnnotations() {
    storeCurrentAnnotations();
    window.allAnnotationsVisible = !window.allAnnotationsVisible;
    setShowHideAllButton();
    for (const id in window.annotationHistory[window.currentImage]) {
        window.annotationsVisible[window.currentImage][id] = window.allAnnotationsVisible;
        var showAllButton = document.getElementById("show-hide-annos-" + window.currentImage + "-" + id);
        if(window.allAnnotationsVisible) {
            //showAllButton.innerHTML = "Verberg";
            showAllButton.classList.remove("show");
            showAllButton.classList.add("hide");
        } else {
            //showAllButton.innerHTML = "Toon";
            showAllButton.classList.remove("hide");
            showAllButton.classList.add("show");
        }
    }
    refreshAnnotations(window.anno);
}

{% if not readonly %}
    function setDrawingTool(drawingTool) {
        if(!window.annotationsVisible[window.currentImage]["999999999"]) {
            toggleAnnotations("999999999");
        }
        window.anno.setDrawingTool(drawingTool);
        window.anno.setDrawingEnabled(true);
        window.drawingEnabled = true;

        var drawingToolButtons = document.getElementsByName("drawing-tools");

        for (var i = 0; i < drawingToolButtons.length; i++) {
            if (drawingToolButtons[i].value === drawingTool) {
                drawingToolButtons[i].classList.add("drawing-tool-active");
                drawingToolButtons[i].classList.remove("drawing-tool-inactive");
            } else {
                drawingToolButtons[i].classList.add("drawing-tool-inactive");
                drawingToolButtons[i].classList.remove("drawing-tool-active");
            }
        }
    }

    var colours = document.querySelectorAll('input[name="choose-colour"]');

    for (var i = 0; i < colours.length; i++) {
        colours[i].onchange = chooseColour;
    }

    var style = document.createElement('style');

    function chooseColour() {
        for (var i = 0; i < colours.length; i++) {
            if (colours[i] === this) {
                selectedColour = colours[i].value;
                if (selectedColour === "red") {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(255,0,0) !important;
                        }
                    `;
                } else if (selectedColour === "green") {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(0,255,0) !important;
                        }
                    `;
                } else if (selectedColour === "blue") {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(0,0,255) !important;
                        }
                    `;
                } else if (selectedColour === "orange") {
                    style.innerHTML = `
                        .fill-pattern-line {
                            stroke: rgb(255,165,0) !important;
                        }
                    `;
                }
                document.head.appendChild(style);
            }
        }
    }

    $("#fill-dropdown").select2({
        minimumResultsForSearch: Infinity,
        templateResult: function(option) {
            return optionFill(option);
        },
        templateSelection: function(option) {
            return optionFill(option);
        }
    });

    function optionFill(option) {
        switch(option.id) {
            default:
                return option.text;
            case "rect":
                return $('<span><svg><pattern id="fill-rect-id-1" patternUnits="userSpaceOnUse" width="10px" height="10px"><line class="fill-pattern-line" x1="5" y1="0" x2="5" y2="10" stroke-width="1" /><line class="fill-pattern-line" x1="0" y1="5" x2="10" y2="5" stroke-width="1" /></pattern><rect x="0" y="0" width="130px" height="30px" style="fill: url(#fill-rect-id-1);" /></svg></span>');
            case "diagonal-rect":
                return $('<span><svg><pattern id="fill-cross-id-2" patternUnits="userSpaceOnUse" width="10px" height="10px"><line class="fill-pattern-line" x1="0" y1="0" x2="10" y2="10" stroke-width="1" /><line class="fill-pattern-line" x2="0" y1="0" y2="10" x1="10" stroke-width="1" /></pattern><rect x="0" y="0" width="130px" height="30px" style="fill: url(#fill-cross-id-2);" /></svg></span>');
            case "disconnected-cross":
                return $('<span><svg class="fill-disconnected-cross-id-3"><pattern id="fill-disconnected-cross-id-3" patternUnits="userSpaceOnUse" width="10px" height="10px"><line class="fill-pattern-line" x1="0" y1="0" x2="6" y2="6" stroke-width="1" /><line class="fill-pattern-line" x2="0" y1="0" y2="6" x1="6" stroke-width="1" /></pattern><rect x="0" y="0" width="130px" height="30px" style="fill: url(#fill-disconnected-cross-id-3);" /></svg></span>');
        }
    }

    function selectDropdown() {
        var fill = document.getElementById("fill-dropdown").value;
        if (fill === "") {
            window.annoConf.styleFill = fill;
            window.annoConf.styleClass = 'condition-' + window.annoConf.styleColor;
        } else {
            window.annoConf.styleFill = fill + '-';
            window.annoConf.styleClass = 'condition-' + fill + '-' + window.annoConf.styleColor;
        }
    }

    window.setInterval(function() {
        if (window.drawingEnabled && !window.anno._app.current.annotationLayer.mouseTracker.isTracking()) {
            window.drawingEnabled = false;
            var buttons = document.getElementsByClassName("drawing-tool-active");
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.add("drawing-tool-inactive");
                buttons[i].classList.remove("drawing-tool-active");
            }
        }
    }, 100);
{% endif %}
</script>

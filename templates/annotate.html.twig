<div id="annotation-form">
<div id="annotation-tools">
    <p>Geschiedenis</p>
    <button type="button" onclick="resetAnnotations();">Reset</button>
    {% for id, timestamp in annotation_history %}
    <p>{{ timestamp }}</p>
    <button type="button" onclick="showAnnotationsUntil('{{ id }}')">Toon status op dit moment</button>
    <button type="button" onclick="showAnnotationsOnly('{{ id }}')">Toon toevoegingen</button>
    {% endfor %}
    <p>Gereedschap</p>
    <button type="button" onclick="setDrawingTool('rect');">Rechthoek</button>
    <button type="button" onclick="setDrawingTool('polygon');">Polygoon</button>
    <button type="button" onclick="setDrawingTool('circle');">Cirkel</button>
    <button type="button" onclick="setDrawingTool('ellipse');">Ellips</button>
    <button type="button" onclick="setDrawingTool('freehand');">Vrije hand</button>
    <p>Tekenstijl</p>
    <button type="button" onclick="window.annoConf.styleClass='condition-red';">Rood omlijnd</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-green';">Groen omlijnd</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-blue';">Blauw omlijnd</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-orange';">Oranje omlijnd</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-rect-red';">Invulling: rode vierkanten</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-diagonal-rect-red';">Invulling: rode ruiten</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-disconnected-cross-red';">Invulling: rode kruisen</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-diagonal-rect-green';">Invulling: groene ruiten</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-disconnected-cross-green';">Invulling: groene kruisen</button>
    <button type="button" onclick="window.annoConf.styleClass='condition-diagonal-rect-orange';">Invulling: oranje ruiten</button>
</div>

<div id="annotation-viewer">
<!-- Patterns that can be used in the annotations -->
<svg style="position: absolute; top: -9999px; left: -9999px;">
    <pattern id="rect-red" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
        <line stroke="red" x1="0" y1="0" x2="0" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
        <line stroke="red" x1="{{ pattern_size }}" y1="0" x2="0" y2="0" stroke-width="{{ stroke_width }}"></line>
    </pattern>
    <pattern id="diagonal-rect-red" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
        <line stroke="red" x1="0" y1="0" x2="{{ pattern_size }}" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
        <line stroke="red" x2="0" y1="0" y2="{{ pattern_size }}" x1="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
    </pattern>
    <pattern id="disconnected-cross-red" patternUnits="userSpaceOnUse" width="{{ pattern_size * 5 / 4 }}px" height="{{ pattern_size * 3 / 2 }}px">
        <line stroke="red" x1="0" y1="0" x2="{{ pattern_size * 4 / 5 }}" y2="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
        <line stroke="red" x2="0" y1="0" y2="{{ pattern_size * 4 / 5 }}" x1="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
    </pattern>
    <pattern id="diagonal-rect-green" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
        <line stroke="green" x1="0" y1="0" x2="{{ pattern_size }}" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
        <line stroke="green" x2="0" y1="0" y2="{{ pattern_size }}" x1="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
    </pattern>
    <pattern id="disconnected-cross-green" patternUnits="userSpaceOnUse" width="{{ pattern_size * 5 / 4 }}px" height="{{ pattern_size }}px">
        <line stroke="red" x1="0" y1="0" x2="{{ pattern_size * 4 / 5 }}" y2="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
        <line stroke="red" x2="0" y1="0" y2="{{ pattern_size * 4 / 5 }}" x1="{{ pattern_size * 4 / 5 }}" stroke-width="{{ stroke_width }}"></line>
    </pattern>
    <pattern id="diagonal-rect-orange" patternUnits="userSpaceOnUse" width="{{ pattern_size }}px" height="{{ pattern_size }}px">
        <line stroke="orange" x1="0" y1="0" x2="{{ pattern_size }}" y2="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
        <line stroke="orange" x2="0" y1="0" y2="{{ pattern_size }}" x1="{{ pattern_size }}" stroke-width="{{ stroke_width }}"></line>
    </pattern>
</svg>

<div id="openseadragon-annotorious"></div>

<input type="hidden" id="annotation_data" name="annotation_data">
<input type="hidden" id="iiif_image_url" name="iiif_image_url" value="{{ prefilled_data['iiif_image_url'] }}">
<input type="hidden" id="inventory_id" name="inventory_id" value="{{ prefilled_data['inventory_id'] }}">
<input type="hidden" id="base_id" name="base_id"{% if prefilled_data['base_id'] is defined %} value="{{ prefilled_data['base_id'] }}"{% endif %}>
<input type="hidden" id="report_history" name="report_history"{% if prefilled_data['report_history'] is defined %} value="{{ prefilled_data['report_history'] | json_encode }}"{% endif %}>
</div>
</div>
<script>
window.onload = function() {
    window.osd = OpenSeadragon({
        id: "openseadragon-viewer",
        tileSources: [ {{ iiif_image_data | json_encode | raw }} ]
    });

    window.osd_anno = OpenSeadragon({
        id: "openseadragon-annotorious",
        tileSources: [ {{ iiif_image_data | json_encode | raw }} ]
    });

    window.annoConf = {
        locale: 'auto'
    };

    window.anno = OpenSeadragon.Annotorious(window.osd_anno, window.annoConf);

    Annotorious.SelectorPack(window.anno, {});

    //TODO set proper auth info
    window.anno.setAuthInfo({
        id: 'http://www.example.com/hero-solutions',
        displayName: 'Hero Solutions'
    });

    //TODO remove this, for testing purposes only
    {% if annotation_history is empty %}
        window.anno.loadAnnotations('{{ asset('annotations.w3c.json') }}');
    {% else %}
        window.anno.setAnnotations(window.mostRecentAnnotations);
    {% endif %}

    document.forms[0].addEventListener('submit', function() {
        if(!window.isCurrentAnnotations) {
            document.getElementById("annotation_data").value = JSON.stringify(window.mostRecentAnnotations);
        } else {
            document.getElementById("annotation_data").value = JSON.stringify(window.anno.getAnnotations());
        }
    });
};

var annotationHistory = {{ annotation_history | json_encode | raw }};

var addedAnnotations = {};
{% for reportId, annotation in annotations %}
var annos = {};
{% for id, a in annotation %}
annos["{{ id }}"] = JSON.parse({{ a | json_encode | raw }});
{% endfor %}
addedAnnotations["{{ reportId }}"] = annos;
{% endfor %}

var deletedAnnotations = {};
{% for reportId, annotation in deleted_annotations %}
var deletedAnnos = [];
{% for id, a in annotation %}
deletedAnnos.push("{{ id }}");
{% endfor %}
deletedAnnotations["{{ reportId }}"] = deletedAnnos;
{% endfor %}

annotationsUntil = {};
annotationsOnly = {};
var lastAnnotation = {};
var highestId = -1;
for(const id in annotationHistory) {
    if(id in deletedAnnotations) {
        for(const delId of deletedAnnotations[id]) {
            delete lastAnnotation[delId];
        }
    }
    if(id in addedAnnotations) {
        var thisAnnotation = [];
        for(const [ annoId, anno] of Object.entries(addedAnnotations[id])) {
            lastAnnotation[annoId] = anno;
            thisAnnotation.push(anno);
        }
        annotationsOnly[id] = thisAnnotation;
    }
    var arr = [];
    for(const [ annoId, anno ] of Object.entries(lastAnnotation)) {
        arr.push(anno);
    }
    annotationsUntil[id] = arr;
    var idInt = parseInt(id);
    if(idInt > highestId) {
        highestId = idInt;
    }
}
if(highestId > -1) {
    window.mostRecentAnnotations = annotationsUntil[highestId];
} else {
    window.mostRecentAnnotations = [];
}
window.isCurrentAnnotations = true;

function showAnnotationsUntil(id) {
    if(window.isCurrentAnnotations) {
        window.mostRecentAnnotations = window.anno.getAnnotations();
        window.isCurrentAnnotations = false;
    }
    window.anno.setAnnotations(annotationsUntil[id]);
}

function showAnnotationsOnly(id) {
    if(window.isCurrentAnnotations) {
        window.mostRecentAnnotations = window.anno.getAnnotations();
        window.isCurrentAnnotations = false;
    }
    window.anno.setAnnotations(annotationsOnly[id]);
}

function resetAnnotations() {
    if(!window.isCurrentAnnotations) {
        window.isCurrentAnnotations = true;
        window.anno.setAnnotations(window.mostRecentAnnotations);
    }
}

function setDrawingTool(drawingTool) {
    resetAnnotations();
    window.anno.setDrawingTool(drawingTool);
    window.anno.setDrawingEnabled(true);
}
</script>
